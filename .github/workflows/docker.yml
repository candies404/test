name: Image Arch Check and Sync Enhanced

on:
  workflow_dispatch:

jobs:
  check-and-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Process images
        run: |
          set -eo pipefail
          DEST_REPO="${{ secrets.DOCKERHUB_USERNAME }}"
          SYNC_ENTRIES="nginx=nginx-m,redis:7.0=redis:7,chipsman/uptime-kuma=uptime-kuma-back,chipsman/one-hub=one-hub"

          # 配置解析
          declare -A SYNC_MAP
          IFS=',' read -ra entries <<< "$SYNC_ENTRIES"
          for entry in "${entries[@]}"; do
            IFS='=' read -r key value <<< "$entry"
            [[ -z "$key" || -z "$value" ]] && { echo "::error::Invalid entry: $entry"; exit 1; }
            SYNC_MAP["$key"]="$value"
          done
          IMAGES=("${!SYNC_MAP[@]}")

          for source_image in "${IMAGES[@]}"; do
            echo "::group::🔍 Processing $source_image"
            
            # 源路径构造
            if [[ "$source_image" == *":"* ]]; then
              source_name="${source_image%:*}"
              source_tag="${source_image#*:}"
            else
              source_name="$source_image"
              source_tag="latest"
            fi
            full_source="docker.io/$([[ "$source_name" != *"/"* ]] && echo "library/")${source_name}:$source_tag"

            # 目标路径构造
            target_ref="${SYNC_MAP[$source_image]}"
            [[ -z "$target_ref" ]] && { echo "::error::Missing target mapping"; exit 1; }
            
            if [[ "$target_ref" == *":"* ]]; then
              target_name="${target_ref%:*}"
              target_tag="${target_ref#*:}"
            else
              target_name="$target_ref"
              target_tag="$source_tag"  # 继承源标签
            fi
            full_target="docker.io/${DEST_REPO}/${target_name}:${target_tag}"
            
            # 数据校验
            echo "[验证] 源: $full_source"
            echo "     目标: $full_target"
            if ! skopeo inspect "docker://${full_source}" >/dev/null 2>&1; then
              echo "::error::源镜像不可访问"; exit 1
            fi

            # 版本比对
            need_sync=true
            if skopeo inspect "docker://${full_target}" &>/dev/null; then
              source_digest=$(skopeo inspect --format '{{.Digest}}' "docker://${full_source}")
              target_digest=$(skopeo inspect --format '{{.Digest}}' "docker://${full_target}")
              if [[ "$source_digest" == "$target_digest" ]]; then
                echo "🟢 当前版本已是最新 (Digest: ${source_digest})"
                need_sync=false
              else
                echo "🟡 检测到更新: ${source_digest:0:12}.. → ${target_digest:0:12}.."
              fi
            else
              echo "🟡 目标镜像不存在，需要新建"
            fi

            if [[ "$need_sync" == "false" ]]; then
              echo "✅ 跳过同步"
              echo "::endgroup::"
              continue
            fi

            # 架构对比报告
            echo "🔍 架构差异分析："
            echo "━━━━━━━━━━━━━━━━━━━━━"
            source_arch=$(skopeo inspect --raw "docker://${full_source}" | jq -r '
              if .manifests then
                [.manifests[].platform | "\(.os)/\(.architecture)\(.variant?//""|if .!="" then "/"+. else "" end)"] | join(", ")
              else
                "\(.Os)/\(.Architecture)\(.Variant?//""|if .!="" then "/"+. else "" end)"
              end' 2>/dev/null || echo "<无法获取>")
            
            target_arch=$(skopeo inspect "docker://${full_target}" --raw 2>/dev/null | jq -r '
              if .manifests then
                [.manifests[].platform | "\(.os)/\(.architecture)\(.variant?//""|if .!="" then "/"+. else "" end)"] | join(", ")
              else
                "\(.Os)/\(.Architecture)\(.Variant?//""|if .!="" then "/"+. else "" end)"
              end' 2>/dev/null || echo "<无历史版本>")
            
            printf "%-28s | %-28s\n" "源架构" "当前架构"
            echo "─────────────────────────────┼─────────────────────────────"
            printf "\033[32m%-28s\033[0m | \033[31m%-28s\033[0m\n" "$source_arch" "$target_arch"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

            # 架构检测
            echo "🔄 检测源镜像架构..."
            raw_manifest=$(skopeo inspect --raw "docker://${full_source}" | tee /tmp/manifest.txt)
            is_multiarch=false

            if echo "$raw_manifest" | jq -e '
              .manifests and 
              (.manifests | length > 0) and 
              (.mediaType | test("manifest.list|vnd.docker.distribution.manifest.list"))
            ' >/dev/null; then
              is_multiarch=true
              arch_list=$(echo "$raw_manifest" | jq -r '
                [.manifests[].platform | 
                 select(.os and .architecture and .os != "unknown") |
                 "\(.os)/\(.architecture)\(.variant?//""|if .!="" then "/"+. else "" end)"
                ] | unique | join(", ")')
              echo "⚙️ 多架构支持: ${arch_list}"
            else
              inspect_data=$(skopeo inspect "docker://${full_source}")
              os=$(echo "$inspect_data" | jq -r '.Os')
              arch=$(echo "$inspect_data" | jq -r '.Architecture')
              variant=$(echo "$inspect_data" | jq -r '.Variant? // ""')
              [[ "$os" != "unknown" && "$arch" != "unknown" ]] && \
                echo "⚙️ 单架构: ${os}/${arch}${variant:+/$variant}" || \
                echo "::warning::无效架构信息 os:$os/arch:$arch"
            fi

            # 同步执行
            if [[ "$is_multiarch" == "true" ]]; then
              echo "🚀 开始多架构同步..."
              docker buildx imagetools create -t "$full_target" "$full_source" || {
                echo "::error::镜像同步失败"; exit 1
              }
            else
              echo "⚡ 执行单架构同步..."
              docker pull --quiet "$full_source"
              docker tag "$full_source" "$full_target"
              docker push --quiet "$full_target" || {
                echo "::error::镜像推送失败"; exit 1
              }
            fi
            
            echo "✅ 同步完成 → $(date +"%Y-%m-%d %T")"
            echo "::endgroup::"
          done
