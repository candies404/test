name: Multi-arch Image Sync

on:
  workflow_dispatch:
    inputs:
      sync_mappings:
        description: '镜像同步规则（格式：源镜像=目标镜像，多个用逗号或换行分隔）'
        required: false

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  sync-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: Validate and process SYNC_MAPPINGS
        id: process-sync-mappings
        env:
          SYNC_MAPPINGS_INPUT: ${{ inputs.sync_mappings || vars.SYNC_MAPPINGS }}
        run: |
          # 增强的输入预处理
          processed_input=$(echo "$SYNC_MAPPINGS_INPUT" | 
            tr '\n' ',' | 
            sed -E 's/[[:space:]]*,[[:space:]]*/,/g; s/^,//; s/,$//' |
            envsubst
          )
          
          declare -A valid_rules
          declare -A grouped_rules
          declare -a source_images
          
          IFS=',' read -ra RULES <<< "$processed_input"
          for raw_rule in "${RULES[@]}"; do
            # 强化规则清理
            rule=$(echo "$raw_rule" | xargs | sed -E 's//\//{2,}/\//g; s/(:[^=]+)=/\1 =/')
            
            if [[ "$rule" =~ ^([^=]+)[[:space:]]*=[[:space:]]*(.+)$ ]]; then
              src=$(echo "${BASH_REMATCH[1]}" | sed 's/^docker.io\///')
              dst="${BASH_REMATCH[2]}"
              
              # 标准化源镜像格式
              if [[ ! "$src" =~ / ]]; then
                src="docker.io/library/$src"
              fi
              [[ ! "$src" =~ : ]] && src="$src:latest"

              # 处理通配符(*)和特殊字符
              safe_key=$(echo "$src=>$dst" | tr '*@#!' 'xxxx')
              if [[ -n "${valid_rules[$safe_key]}" ]]; then
                echo "::notice::跳过重复规则: $src → $dst"
                continue
              fi
              valid_rules[$safe_key]=1

              # 处理目标镜像路径
              if [[ "$dst" =~ \${DOCKERHUB_USERNAME} ]]; then
                dst=$(echo "$dst" | sed "s/\${DOCKERHUB_USERNAME}/$DOCKERHUB_USERNAME/")
              fi

              grouped_rules["$dst"]+="\"$src\" "  # JSON安全引用
              source_images+=("$src")
              echo "✅ 有效规则: $src → $dst"
            else
              echo "::warning::无效格式: $raw_rule"
            fi
          done

          # 生成标准化输出
          echo "unique_sources=$(printf '%s\n' "${source_images[@]}" | jq -Rn '[inputs | select(. != "")] | unique')" >> $GITHUB_OUTPUT
          echo "total_rules=${#valid_rules[@]}" >> $GITHUB_OUTPUT
          
          # 修复分组JSON构造（关键修改点）
          grouped_json=$(jq -n '{}')
          for dst in "${!grouped_rules[@]}"; do
            src_list=${grouped_rules[$dst]}
            formatted_srcs=$(echo "[${src_list% }]" | jq -c 'unique')
            grouped_json=$(jq --arg dst "$dst" --argjson srcs "$formatted_srcs" '. + { ($dst): $srcs }' <<< "$grouped_json")
          done
          echo "grouped_rules=$grouped_json" >> $GITHUB_OUTPUT

      - name: Architecture Validation
        run: |
          sources=${{ fromJson(steps.process-sync-mappings.outputs.unique_sources) }}
          for image in "${sources[@]}"; do
            echo "🔍 检查架构: $image"
            skopeo inspect --raw "docker://$image" | jq -c '[.manifests[].platform | {os,arch,variant}]' || true
            echo "-------------------"
          done

      - name: Execute Image Sync
        id: image-sync
        run: |
          grouped_rules='${{ steps.process-sync-mappings.outputs.grouped_rules }}'
          echo "$grouped_rules" | jq -r 'keys[] as $dst | "\($dst) \(.[$dst] | join(" "))"' | while read -r dst srcs; do
            echo "🚀 同时推送多源镜像: $srcs → $dst"
            docker buildx imagetools create -t "$dst" $srcs || echo "::error::同步失败: $srcs → $dst"
          done
      - name: Generate Report
        run: |
          # 初始化报告模板
          report_header="# [$(date '+%Y-%m-%d %H:%M:%S')] 镜像同步报告"
          success_table="\n## ✅ 成功同步 (${ { steps.image-sync.outputs.total_success } })"
          failed_table="\n## ❌ 失败同步 (${ { steps.image-sync.outputs.total_failed } })"
          
          # 构建详细结果
          echo "${{ steps.image-sync.outputs.grouped_rules }}" | jq -r 'to_entries[] | "\(.key)=\(.value | join(" "))"' | while IFS="=" read -r dst srcs; do
            success_table+="\n- ${srcs} → ${dst}"
          done
          
          if [ ${{ steps.image-sync.outputs.total_failed }} -gt 0 ]; then
            failed_rules_json='${{ steps.image-sync.outputs.failed_rules }}'
            fail_count=$(echo "$failed_rules_json" | jq length)
            for ((i=0; i<$fail_count; i++)); do
              rule=$(echo "$failed_rules_json" | jq -r ".[$i]")
              failed_table+="\n- ${rule}"
            done
          fi
          
          # 生成完整报告
          full_report="${report_header}\n${success_table}\n${failed_table}"
          echo -e "$full_report"
          
          # 写入GitHub注释(可选)
          if [ -n "$GITHUB_STEP_SUMMARY" ]; then
            echo -e "$full_report" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 失败时主动触发非零退出
          if [ ${{ steps.image-sync.outputs.total_failed }} -gt 0 ]; then
            echo "::error::存在 ${ { steps.image-sync.outputs.total_failed } } 条同步失败"
            exit 1
          fi

