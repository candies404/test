name: Docker 镜像同步

on:
  workflow_dispatch:
    inputs:
      sync_mappings:
        description: '镜像同步映射（格式：源镜像=目标镜像，多个用逗号分隔）'
        required: false

jobs:
  image-sync:
    name: 镜像同步
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DEST_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_SYNC_MAPPINGS: ${{ vars.DOCKER_SYNC_MAPPINGS }}
      BUILDKIT_PROGRESS: plain

    steps:
      - name: 验证镜像同步格式
        id: validate-mappings
        run: |
          # 优先使用手动输入
          if [ -n "${{ github.event.inputs.sync_mappings }}" ]; then
            echo "使用手动输入的同步映射"
            PROCESSED_MAPPINGS="${{ github.event.inputs.sync_mappings }}"
          else
            echo "使用环境变量中的同步映射"
            PROCESSED_MAPPINGS="$DOCKER_SYNC_MAPPINGS"
          fi

          # 清理特殊字符并校验格式
          CLEAN_MAPPINGS=$(echo "$PROCESSED_MAPPINGS" | tr -d '\n' | tr -s ' ' | sed -e 's/ //g' -e 's/,+/,/g')
          if [ -z "$CLEAN_MAPPINGS" ]; then
            echo "::error::未配置同步映射"
            exit 1
          fi

          if ! echo "$CLEAN_MAPPINGS" | grep -qE '^([a-zA-Z0-9\._/-]+=[a-zA-Z0-9\._/-]+)(,[a-zA-Z0-9\._/-]+=[a-zA-Z0-9\._/-]+)*$'; then
            echo "::error::无效的映射格式"
            exit 1
          fi

          echo "SYNC_MAPPINGS=${CLEAN_MAPPINGS}" >> $GITHUB_ENV

      - name: 设置多架构构建环境
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: 安装 skopeo
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y skopeo
          echo "skopeo $(skopeo --version | awk '{print $3}') 已安装"

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: 执行镜像同步
        id: sync
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          # 颜色定义
          readonly COLOR_RESET="\033[0m"
          readonly COLOR_SRC="\033[1;34m"
          readonly COLOR_DST="\033[1;36m"
          readonly COLOR_OK="\033[1;32m"
          readonly COLOR_ERROR="\033[1;31m"

          # 初始化结果统计
          declare -i success_count=0 skipped_count=0 failed_count=0
          declare -a success_list=() skipped_list=() failed_list=()

          # 加载同步映射
          declare -A SYNC_MAP=()
          IFS=',' read -ra PAIRS <<< "$SYNC_MAPPINGS"
          for pair in "${PAIRS[@]}"; do
            IFS='=' read -r src dst <<< "$pair"
            SYNC_MAP["$src"]="$dst"
          done

          # 镜像规范化函数
          normalize_image() {
            local raw_ref=$1 context=$2
            local registry namespace image_tag

            # 分割标签部分
            if [[ "$raw_ref" == *":"* ]]; then
              image_tag="${raw_ref##*:}"
              raw_ref="${raw_ref%:*}"
            else
              image_tag="latest"
            fi

            # 处理注册表路径
            if [[ "$raw_ref" == *"/"* ]]; then
              IFS='/' read -ra parts <<< "$raw_ref"
              registry="docker.io"
              namespace="${parts[*]:0:${#parts[@]}-1}"
              image="${parts[-1]}"
            else
              registry="docker.io"
              namespace=$([ "$context" == "source" ] && echo "library" || echo "$DEST_REPO")
              image="$raw_ref"
            fi

            # 拼接完整镜像地址
            printf "%s/%s/%s:%s" "$registry" "$namespace" "$image" "$image_tag"
          }

          # 镜像同步函数
          sync_image() {
            local src=$1 dst=$2
            echo -e "🔄 同步 ${COLOR_SRC}$src${COLOR_RESET} → ${COLOR_DST}$dst${COLOR_RESET}"

            # 检查是否为多架构镜像
            if skopeo inspect --raw --creds "$DOCKERHUB_USER:$DOCKERHUB_TOKEN" "docker://$src" | \
               jq -e '.manifests != null' >/dev/null 2>&1; then
              echo "ℹ️ 检测到多架构镜像"
              docker buildx imagetools create -t "$dst" "$src"
            else
              echo "ℹ️ 单架构镜像处理"
              docker pull --quiet "$src"
              docker tag "$src" "$dst"
              docker push --quiet "$dst"
            fi
          }

          # 主处理循环
          for source_ref in "${!SYNC_MAP[@]}"; do
            echo "::group::处理镜像对: $source_ref"
            dest_ref="${SYNC_MAP[$source_ref]}"

            # 标准化镜像地址
            src_image=$(normalize_image "$source_ref" "source")
            dst_image=$(normalize_image "$dest_ref" "target")
            echo -e "  源地址: ${COLOR_SRC}$src_image${COLOR_RESET}"
            echo -e "  目标地址: ${COLOR_DST}$dst_image${COLOR_RESET}"

            # 获取镜像摘要
            src_digest=$(skopeo inspect --creds "$DOCKERHUB_USER:$DOCKERHUB_TOKEN" \
              --format '{{.Digest}}' "docker://$src_image" 2>/dev/null || true)

            if [ -z "$src_digest" ]; then
              echo "❌ 源镜像不存在或无法访问"
              ((failed_count++))
              failed_list+=("$src_image")
              echo "::endgroup::"
              continue
            fi

            # 检查目标镜像状态
            if dst_info=$(skopeo inspect --creds "$DOCKERHUB_USER:$DOCKERHUB_TOKEN" \
              "docker://$dst_image" 2>/dev/null); then
              dst_digest=$(jq -r '.Digest' <<< "$dst_info")
              if [ "$src_digest" == "$dst_digest" ]; then
                echo "⏭️ 目标镜像已同步，跳过"
                ((skipped_count++))
                skipped_list+=("$src_image")
                echo "::endgroup::"
                continue
              fi
            fi

            # 执行同步操作
            if sync_image "$src_image" "$dst_image"; then
              echo "✅ 同步成功"
              ((success_count++))
              success_list+=("$src_image")
            else
              echo "❌ 同步失败"
              ((failed_count++))
              failed_list+=("$src_image")
            fi

            echo "::endgroup::"
          done

          # 生成结果报告
          echo "NOTIFICATION_CONTENT<<EOF" >> $GITHUB_ENV
          echo "## 同步结果统计" >> $GITHUB_ENV
          echo "✅ 成功: $success_count" >> $GITHUB_ENV
          echo "⏭️ 跳过: $skipped_count" >> $GITHUB_ENV
          echo "❌ 失败: $failed_count" >> $GITHUB_ENV

          [ $success_count -gt 0 ] && echo "HAS_SUCCESS=true" >> $GITHUB_ENV
          [ $failed_count -gt 0 ] && echo "HAS_FAILURE=true" >> $GITHUB_ENV

          # 构建详细报告
          build_details() {
            local title=$1
            local color=$2
            shift 2
            for item in "$@"; do
              echo -e "${color}•${COLOR_RESET} ${item}"
            done
          }

          echo -e "\n### 成功列表" >> $GITHUB_ENV
          build_details "Success" "$COLOR_OK" "${success_list[@]}" >> $GITHUB_ENV
          echo -e "\n### 跳过列表" >> $GITHUB_ENV
          build_details "Skipped" "$COLOR_OK" "${skipped_list[@]}" >> $GITHUB_ENV
          echo -e "\n### 失败列表" >> $GITHUB_ENV
          build_details "Failed" "$COLOR_ERROR" "${failed_list[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 发送通知
        uses: candies404/Multi-Channel-Notifier@latest
        if: ${{ env.HAS_SUCCESS == 'true' || env.HAS_FAILURE == 'true' }}
        with:
          title: "镜像同步报告"
          content: |
            ${{ env.NOTIFICATION_CONTENT }}
          hitokoto: false
          wpush_key: ${{ secrets.WPUSH_KEY }}
