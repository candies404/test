name: Image Arch Check and Sync

on:
  workflow_dispatch:

jobs:
  check-and-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Process images
        run: |
          set -e
          DEST_USER="${{ secrets.DOCKERHUB_USERNAME }}"

          # 使用完整目标路径强制指定registry
          declare -A SYNC_MAP=(
            ["nginx"]="docker.io/${DEST_USER}/nginx-m:latest"
            ["redis:7.0"]="docker.io/${DEST_USER}/redis:7"
            ["chipsman/uptime-kuma"]="docker.io/${DEST_USER}/uptime-kuma-back:latest"
            ["chipsman/one-hub"]="docker.io/${DEST_USER}/one-hub:latest"
          )

          IMAGES=("nginx" "redis:7.0" "chipsman/uptime-kuma" "chipsman/one-hub")

          for source_image in "${IMAGES[@]}"; do
            echo "====== Processing: $source_image ======"

            # 严格构造源镜像路径
            if [[ "$source_image" == *":"* ]]; then
              src_tag="${source_image#*:}"
              src_name="${source_image%:*}"
            else
              src_tag="latest"
              src_name="$source_image"
            fi

            if [[ "$src_name" != *"/"* ]]; then
              full_source="docker.io/library/${src_name}:${src_tag}"
            else
              full_source="docker.io/${src_name}:${src_tag}"
            fi
            
            # 从同步映射获取完整目标路径
            full_target="${SYNC_MAP[$source_image]}"

            echo "[VERBOSE] Conversion: ${full_source} → ${full_target}"

            # 检查镜像架构类型
            manifest=$(skopeo inspect --raw "docker://${full_source}")
            if echo "$manifest" | jq -e '.manifests' >/dev/null; then
              echo "Multi-architecture detected"
              docker buildx imagetools create --debug -t "$full_target" "$full_source"
            else
              echo "Single-architecture detected"
              docker pull "$full_source"
              docker tag "$full_source" "$full_target"
              docker push "$full_target"
            done

            echo "[SUCCESS] ✅ Synced ${full_target}"
            echo "======================================="
          done
