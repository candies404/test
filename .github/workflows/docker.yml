name: Image Sync with Architecture Validation

on:
  workflow_dispatch:
    inputs:
      mappings:
        description: '镜像同步映射（格式：源镜像=目标镜像，多个用逗号分隔）'
        required: false

jobs:
  image-sync:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DEST_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
      BUILDKIT_PROGRESS: plain
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      # 新增配置解析步骤
      - name: Configure sync mappings
        id: config
        run: |
          # 优先使用手动输入，否则使用仓库变量
          if [[ -n '${{ github.event.inputs.mappings }}' ]]; then
            # 安全处理输入参数（去除外围单引号）
            cleaned_input=$(echo '${{ github.event.inputs.mappings }}' | sed "s/^['\"]//;s/['\"]$//")
            echo "SYNC_SOURCE=manual" >> $GITHUB_ENV
            echo "DOCKER_SYNC_MAPPINGS=${cleaned_input}" >> $GITHUB_ENV
          else
            # 安全处理仓库变量（去除外围单引号）
            cleaned_var=$(echo '${{ vars.DOCKER_SYNC_MAPPINGS }}' | sed "s/^['\"]//;s/['\"]$//")
            echo "SYNC_SOURCE=repository" >> $GITHUB_ENV
            echo "DOCKER_SYNC_MAPPINGS=${cleaned_var}" >> $GITHUB_ENV
          fi

      # 前置校验步骤
      - name: Validate mappings configuration
        run: |
          if [[ -z "$DOCKER_SYNC_MAPPINGS" || "$DOCKER_SYNC_MAPPINGS" =~ ^[[:space:],]*$ ]]; then
            echo "::error::[配置检查] 无效配置，来源：$SYNC_SOURCE"
            echo "请通过以下方式提供有效配置："
            echo "1. 手动触发时输入 mappings 参数"
            echo "2. 在仓库变量中设置 DOCKER_SYNC_MAPPINGS"
            exit 1
          fi
          echo "有效配置内容: [${DOCKER_SYNC_MAPPINGS}]"

      - name: Setup build environment
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: Install system dependencies
        run: |
          echo "🛠️ Installing required tools..."
          sudo apt-get update && sudo apt-get install -y skopeo jq
          echo "✅ Dependencies installed"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}
        env:
          DOCKER_REGISTRY: index.docker.io

      - name: Execute image synchronization
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          # 颜色定义
          readonly COLOR_RESET="\033[0m"
          readonly COLOR_SRC="\033[1;34m"
          readonly COLOR_DST="\033[1;35m"
          readonly COLOR_OK="\033[1;32m"
          readonly COLOR_WARN="\033[1;33m"
          readonly COLOR_ERR="\033[1;31m"

          # 日志函数
          log() {
            local level=$1
            local message=$2
            local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            case $level in
              "INFO") echo -e "${COLOR_OK}[${timestamp}] INFO: ${message}${COLOR_RESET}" ;;
              "WARN") echo -e "${COLOR_WARN}[${timestamp}] WARN: ${message}${COLOR_RESET}" ;;
              "ERROR") echo -e "${COLOR_ERR}[${timestamp}] ERROR: ${message}${COLOR_RESET}" ;;
            esac
          }

          # 字符串清理函数
          trim_string() {
            local str="$*"
            str="${str#"${str%%[![:space:]]*}"}"  # 移除前导空格
            str="${str%"${str##*[![:space:]]}"}"  # 移除尾部空格
            echo -n "$str"
          }

          # 配置解析逻辑
          log "INFO" "开始解析同步配置（来源：$SYNC_SOURCE）"
          declare -A SYNC_MAP

          # 数据预处理
          cleaned_input=$(
            echo "$DOCKER_SYNC_MAPPINGS" \
            | tr '\n' ','                 `# 换行符转逗号` \
            | sed 's/,+/,/g'              `# 合并连续逗号` \
            | sed -e 's/^,*//' -e 's/,*$//'  # 去除首尾逗号
          )

          IFS=',' read -ra entries <<< "$cleaned_input"
          valid_count=0

          for entry in "${entries[@]}"; do
            entry=$(trim_string "$entry")
            if [[ -z "$entry" ]]; then continue; fi

            IFS='=' read -r key value <<< "$entry"
            key=$(trim_string "$key")
            value=$(trim_string "$value")

            # 键值对非空校验
            if [[ -z "$key" || -z "$value" ]]; then
              log "WARN" "忽略无效条目: '${entry}'"
              continue
            fi

            # 源镜像标签校验
            if [[ "$key" =~ : ]]; then
              src_tag="${key#*:}"
              if [[ "$src_tag" =~ [/\\\'\"] ]]; then
                log "WARN" "条目包含非法字符: '${entry}'"
                continue
              fi
            fi

            # 高危字符过滤（守护代码安全）
            if [[ "$key" =~ [\'\"\\] ]] || [[ "$value" =~ [\'\"\\] ]]; then
              log "WARN" "检测到危险字符，跳过条目: '${entry}'"
              continue
            fi

            SYNC_MAP["$key"]="$value"
            ((valid_count++))
            log "INFO" "有效映射: ${COLOR_SRC}${key}${COLOR_RESET} → ${COLOR_DST}${value}${COLOR_RESET}"
          done

          # 最终有效性检查
          if [[ $valid_count -eq 0 ]]; then
            log "ERROR" "没有有效同步条目"
            echo "原始输入内容 → [$DOCKER_SYNC_MAPPINGS]"
            exit 1
          fi

          normalize_image() {
            local image_ref=$1 default_tag=$2 context=$3
            if [[ "$image_ref" == *":"* ]]; then
              local image_name="${image_ref%:*}" image_tag="${image_ref#*:}"
            else
              local image_name="$image_ref" image_tag="$default_tag"
            fi
            case $context in
              "source") 
                if [[ "$image_name" == *"/"* ]]; then
                  printf "docker.io/%s:%s" "$image_name" "$image_tag"
                else
                  printf "docker.io/library/%s:%s" "$image_name" "$image_tag"
                fi ;;
              "target") printf "docker.io/%s/%s:%s" "$DEST_REPO" "$image_name" "$image_tag" ;;
              *) log "ERROR" "无效上下文参数: $context"; exit 1 ;;
            esac
          }

          get_architecture() {
            local image=$1
            log "INFO" "获取架构信息：${COLOR_SRC}$image${COLOR_RESET}"

            # ================== 核心修正点 ===================
            # 旧条件：.manifests != null and (.mediaType | contains("manifest.list"))
            # 新条件：仅检查是否存在 manifests 数组
            if raw_manifest=$(skopeo inspect --raw --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$image" 2>&1) &&
              jq -e '.manifests != null' <<< "$raw_manifest" &>/dev/null; then
            # ================== 修正完成 ====================

              local arch_list=$(jq -r '
                [.manifests[].platform |
                  select(.os != "unknown" and .architecture != "unknown") |
                  "\(.os)/\(.architecture)\(if .variant != "" then "/"+.variant else "" end)"
                ] | unique | join(", ")' <<< "$raw_manifest")

              [[ -z "$arch_list" ]] && { log "ERROR" "无有效架构信息"; return 1; }
              log "INFO" "检测到多架构镜像：${arch_list// /,}"
              echo "$arch_list"
              return 0
            else
              local inspect_info=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$image" 2>/dev/null)
              local os=$(jq -r '.Os // "unknown"' <<< "$inspect_info")
              local arch=$(jq -r '.Architecture // "unknown"' <<< "$inspect_info")
              local variant=$(jq -r '.Variant? // ""' <<< "$inspect_info")

              [[ "$os" == "unknown" || "$arch" == "unknown" ]] && {
                log "INFO" "单架构镜像：unknown"
                echo "unknown"; return 0
              }

              local result="${os}/${arch}"
              [[ -n "$variant" ]] && result+="/$variant"
              case "$arch" in
                "arm64") result="linux/arm64/v8" ;;
                "arm") [[ "$variant" == "v7" ]] && result="linux/arm/v7" ;;
              esac
              log "INFO" "单架构镜像：$result"
              echo "$result"
            fi
          }

          sync_image() {
            local src=$1 dst=$2
            log "INFO" "启动同步：${COLOR_SRC}$src${COLOR_RESET} → ${COLOR_DST}$dst${COLOR_RESET}"
            
            # 同步模式判断联动修复
            if skopeo inspect --raw --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$src" |
               jq -e '.manifests != null' &>/dev/null; then
              log "INFO" "使用多架构同步模式"
              docker buildx imagetools create -t "$dst" "$src" || {
                log "ERROR" "多架构同步失败"; return 1
              }
            else
              docker pull --quiet "$src" || { log "ERROR" "镜像拉取失败"; return 1; }
              docker tag "$src" "$dst" || { log "ERROR" "标签设置失败"; return 1; }
              docker push --quiet "$dst" || { log "ERROR" "推送失败"; return 1; }
            fi
            log "INFO" "同步完成"
          }


          # 处理同步循环
          for source_ref in "${!SYNC_MAP[@]}"; do
            echo "::group::🔄 Processing $source_ref"
            src_image=$(normalize_image "$source_ref" "latest" "source")
            dst_ref="${SYNC_MAP[$source_ref]}"
            dst_image=$(normalize_image "$dst_ref" "$(cut -d: -f2 <<< "$src_image")" "target")
            
            # 新增输出过滤 ↓ 确保捕获正确架构信息
            src_arch=$(get_architecture "$src_image" | tail -1)
            if target_info=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$dst_image" 2>/dev/null); then
              dst_arch=$(get_architecture "$dst_image" | tail -1)
              dst_exists=true
            else
              dst_arch="N/A"
              dst_exists=false
            fi

            echo -e "\n${COLOR_OK}架构对比报告：${COLOR_RESET}"
            # 使用 column 格式化输出 ↓
            # paste <(echo "源架构" "$src_arch") <(echo "目标架构" "$dst_arch") | 
            # column -t -s $'\t' -o " │ "
            # echo

            src_digest=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" --format '{{.Digest}}' "docker://$src_image")
            if $dst_exists && [[ "$(jq -r '.Digest' <<< "$target_info")" == "$src_digest" ]]; then
              log "INFO" "目标镜像已是最新，跳过同步"
              echo "::endgroup::"
              continue
            fi
            sync_image "$src_image" "$dst_image"
            echo "::endgroup::"
          done
