name: Docker 镜像同步

on:
  workflow_dispatch:
    inputs:
      sync_mappings:
        description: '镜像同步映射（格式：源镜像=目标镜像，多个用逗号分隔）'
        required: false

jobs:
  image-sync:
    name: 镜像同步
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DEST_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_SYNC_MAPPINGS: ${{ vars.DOCKER_SYNC_MAPPINGS }}
      BUILDKIT_PROGRESS: plain

    steps:
      - name: 验证镜像同步格式
        id: validate-mappings
        run: |
          # 优先使用手动输入
          if [ -n "${{ github.event.inputs.sync_mappings }}" ]; then
            PROCESSED_MAPPINGS="${{ github.event.inputs.sync_mappings }}"
          else
            PROCESSED_MAPPINGS="$DOCKER_SYNC_MAPPINGS"
          fi

          # 强化处理格式
          CLEAN_MAPPINGS=$(echo "$PROCESSED_MAPPINGS" \
            | tr -d '\n' \
            | tr -s ' ' \
            | sed -E -e 's/[[:space:]]//g' \
                     -e 's/,{2,}/,/g' \
                     -e 's/^,//' \
                     -e 's/,$//')

          if [ -z "$CLEAN_MAPPINGS" ]; then
            echo "::error::未配置同步映射"
            exit 1
          fi

          IFS=',' read -r -a MAPPING_PAIRS <<< "$CLEAN_MAPPINGS"
          INVALID_COUNT=0

          for PAIR in "${MAPPING_PAIRS[@]}"; do
            if ! grep -qE '^[^=]+=[^=]+$' <<< "$PAIR"; then
              echo "::error::映射语法错误: '$PAIR' (正确格式: 源镜像=目标镜像)"
              ((INVALID_COUNT++))
            fi
          done

          [ $INVALID_COUNT -gt 0 ] && exit 1
          echo "SYNC_MAPPINGS=${CLEAN_MAPPINGS}" >> $GITHUB_ENV

      - name: 设置多架构构建环境
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: |
            network=host
            image=moby/buildkit:master-rootless
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled

      - name: 安装 skopeo
        run: |
          echo "🛠️ 正在安装 skopeo..."
          sudo apt-get update -qq && sudo apt-get install -y skopeo
          echo "✅ skopeo $(skopeo --version | awk '{print $3}') 安装完成"

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: 执行镜像同步
        id: sync
        run: |
          #!/usr/bin/env bash
          set -eo pipefail
          shopt -s inherit_errexit

          # 日志系统配置
          declare -A LOG_COLORS=([INFO]="\033[1;32m" [WARN]="\033[1;33m" [ERROR]="\033[1;31m")
          log() {
            local level="${1}" message="${2}" timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            echo -e "${LOG_COLORS[$level]}[${timestamp}] ${level}: ${message}\033[0m" >&2
          }

          # 同步状态追踪
          declare -A SYNC_STATS=([TOTAL]=0 [SUCCESS]=0 [SKIPPED]=0 [FAILED]=0)
          SYNC_DETAILS=()

          # 架构检测逻辑
          get_architecture() {
            local image="${1}"
            local raw_info=$(skopeo inspect --raw --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://${image}" 2>/dev/null || echo "{}")
            
            echo "$raw_info" | jq -r '
              if .manifests? then
                [.manifests[].platform |
                  select((.os != "unknown") and (.architecture != "unknown")) |
                  "\(.os)/\(.architecture)" + 
                  (if .variant? and (.variant != "") and (.variant != null) then "/\(.variant)" else "" end)
                ] | 
                unique | 
                join(",")
              else
                ( [.Os, .Architecture, .Variant // ""] |
                  map(select(. != "unknown" and . != null and . != "")) |
                  if length >= 2 then
                    (.[0] + "/" + .[1] + 
                     (if (length >=3) and (.[2] != "") then "/\(.[2])" else "" end))
                  else
                    "未检测出架构信息"
                  end
                )
              end' 2>/dev/null || echo "解析失败"
          }

          # 镜像正规化处理
          normalize_image() {
            local ref="${1}" default_tag="${2}" context="${3}"
            if [[ ! "$ref" == *":"* ]]; then
              ref="${ref}:${default_tag}"
            fi
            case "$context" in
              "source") 
                [[ "$ref" != */* ]] && ref="library/${ref}"
                echo "docker.io/${ref}"
                ;;
              "target") 
                [[ "$ref" != */* ]] && ref="${DEST_REPO}/${ref}"
                echo "docker.io/${ref}"
                ;;
            esac
          }

          # 架构比较逻辑
          compare_architectures() {
            local src="${1}" dst="${2}"
            local src_arch=$(get_architecture "$src")
            local dst_arch=$(get_architecture "$dst" 2>/dev/null || echo "")
            
            # 特殊异常处理
            if [[ "$src_arch" == "未检测出架构信息" || "$dst_arch" == "未检测出架构信息" ]]; then
              log WARN "架构信息缺失，强制执行同步"
              return 1
            fi
            [[ "$src_arch" == "$dst_arch" ]]
          }

          # 核心同步流程
          process_mapping() {
            local src_ref="${1}" dst_ref="${2}"
            log INFO "🔃 开始处理：${src_ref} → ${dst_ref}"
            
            # 镜像正规化
            src_image=$(normalize_image "$src_ref" "latest" "source")
            dst_image=$(normalize_image "$dst_ref" "$(cut -d: -f2 <<< "$src_image")" "target")
            
            # 目标镜像存在性检查
            if skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://${dst_image}" >/dev/null 2>&1; then
              if compare_architectures "$src_image" "$dst_image"; then
                log INFO "⏭️ 镜像架构一致，跳过同步"
                SYNC_STATS[SKIPPED]=$((SYNC_STATS[SKIPPED]+1))
                SYNC_DETAILS+=("⏩ 已跳过: ${src_ref} → ${dst_ref}")
                return
              fi
            else
              log INFO "⚠️ 目标镜像不存在，需要同步"
            fi

            # 同步操作（最多尝试3次）
            for attempt in {1..3}; do
              log INFO "🔄 同步尝试 #${attempt}"
              if docker buildx imagetools create -t "${dst_image}" "${src_image}"; then
                SYNC_STATS[SUCCESS]=$((SYNC_STATS[SUCCESS]+1))
                SYNC_DETAILS+=("✅ 同步成功: ${src_ref} → ${dst_ref}")
                log INFO "✅ 完成同步（第${attempt}次尝试）"
                return
              else
                SYNC_STATS[FAILED]=$((SYNC_STATS[FAILED]+1))
                log WARN "⛔️ 第${attempt}次同步失败，5秒后重试..."
                sleep 5
              fi
            done
            SYNC_DETAILS+=("❌ 同步失败: ${src_ref} → ${dst_ref}")
            log ERROR "❌ 超出最大重试次数"
          }

          # 主处理循环
          echo "=== 开始处理镜像同步任务 ==="
          IFS=',' read -ra mappings <<< "${SYNC_MAPPINGS}"
          SYNC_STATS[TOTAL]=${#mappings[@]}
          for pair in "${mappings[@]}"; do
            IFS='=' read -r src dst <<< "$pair"
            process_mapping "$src" "$dst"
          done

          # 生成报告
          report_content="📈 镜像同步报告\n"
          report_content+="------------------------------------\n"
          report_content+="总任务数：${SYNC_STATS[TOTAL]}\n"
          report_content+="成功次数：${SYNC_STATS[SUCCESS]}\n"
          report_content+="跳过次数：${SYNC_STATS[SKIPPED]}\n"
          report_content+="失败次数：${SYNC_STATS[FAILED]}\n\n"
          report_content+="详细执行结果：\n"
          report_content+=$(printf "%s\n" "${SYNC_DETAILS[@]}")

          echo "NOTIFICATION_CONTENT<<EOF
          $report_content
          EOF" >> $GITHUB_ENV

      - name: 发送通知
        uses: candies404/Multi-Channel-Notifier@latest
        if: always()
        with:
          title: "🏗️ Docker 镜像同步报告"
          content: ${{ env.NOTIFICATION_CONTENT }}
          wpush_key: ${{ secrets.WPUSH_KEY }}
