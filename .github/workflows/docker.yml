name: Multi-arch Image Sync

on:
  workflow_dispatch:
    inputs:
      sync_mappings:
        description: '镜像同步规则（格式：源镜像=目标镜像，多个用逗号分隔）'
        required: false

jobs:
  sync-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq
          curl -fsSL https://get.docker.com | sh

      - name: Validate and process SYNC_MAPPINGS
        id: process-sync-mappings
        env:
          SYNC_MAPPINGS_INPUT: ${{ inputs.sync_mappings || vars.SYNC_MAPPINGS }}
        run: |
          if [ -z "$SYNC_MAPPINGS_INPUT" ]; then
            echo "::error::SYNC_MAPPINGS 未设置，请提供同步规则。"
            exit 1
          fi

          IFS=',' read -ra RULES <<< "$SYNC_MAPPINGS_INPUT"
          declare -A processed_rules
          declare -A grouped_rules
          declare -a unique_sources

          for rule in "${RULES[@]}"; do
            # 清洗输入：移除所有控制字符和首尾空格
            rule=$(echo "$rule" | tr -d '\r\n' | xargs)
            [[ -z "$rule" ]] && continue

            if [[ "$rule" != *"="* ]]; then
              echo "::warning::忽略无效规则 '$rule'"
              continue
            fi

            source_image="${rule%%=*}"
            dest_image="${rule#*=}"
            source_image=$(echo "$source_image" | tr -d '\r\n' | xargs)
            dest_image=$(echo "$dest_image" | tr -d '\r\n' | xargs)

            # 格式校验
            if [[ ! "$source_image" =~ ^[a-zA-Z0-9_][a-zA-Z0-9_.-]*(:[a-zA-Z0-9_.-]+)?$ ]] || [[ ! "$dest_image" =~ ^[a-zA-Z0-9_][a-zA-Z0-9_.-]*(/[a-zA-Z0-9_][a-zA-Z0-9_.-]*)*(:[a-zA-Z0-9_.-]+)?$ ]]; then
              echo "::error::镜像名称格式错误: '$rule'"
              echo "格式要求示例: src_image[:tag]=dest_namespace/repo[:tag]"
              exit 1
            fi

            key="$source_image=$dest_image"
            [[ -n "${processed_rules[$key]}" ]] && continue
            processed_rules["$key"]=1

            if [[ -z "${grouped_rules[$dest_image]}" ]]; then
              grouped_rules["$dest_image"]="$source_image"
            else
              grouped_rules["$dest_image"]+=" $source_image"
            fi

            if [[ ! " ${unique_sources[@]} " =~ " ${source_image} " ]]; then
              unique_sources+=("$source_image")
            fi
          done

          grouped_json=$(jq -n '{}')
          for dest in "${!grouped_rules[@]}"; do
            sources=(${grouped_rules[$dest]})
            grouped_json=$(echo "$grouped_json" | jq --arg dest "$dest" --argjson sources "${sources[*]}" '. + { ($dest): $sources }')
          done

          echo "grouped_rules=$(echo $grouped_json | jq -c)" >> $GITHUB_OUTPUT
          echo "unique_sources=$(jq -c -n --args '${unique_sources[@]}' 'split(" ")')" >> $GITHUB_OUTPUT
          echo "total_rules=${#processed_rules[@]}" >> $GITHUB_OUTPUT

      - name: Check architectures
        run: |
          unique_sources=${{ steps.process-sync-mappings.outputs.unique_sources }}
          images=$(echo "$unique_sources" | jq -r 'join(" ")')

          IFS=' ' read -ra IMAGES <<< "$images"
          for image in "${IMAGES[@]}"; do
            echo "处理架构检查: $image"
            skopeo inspect "docker://$image"
            echo "----------------------------------------"
          done

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Sync images
        id: sync-images
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          grouped_rules='${{ steps.process-sync-mappings.outputs.grouped_rules }}'

          echo "===== 同步开始 ====="
          jq_exp='to_entries[] | "\(.key)=\(.value | join(" "))"'

          error_occurred=false
          echo "$grouped_rules" | jq -r "$jq_exp" | while IFS== read -r dest sources; do
            clean_dest=$(echo "$dest" | sed 's/[^a-zA-Z0-9_.\/ :-]//g')
            
            # 强制添加DockerHub用户名
            if [[ ! "$clean_dest" =~ ^$DOCKERHUB_USERNAME/ ]]; then
              clean_dest="$DOCKERHUB_USERNAME/$clean_dest"
            fi

            # 自动补全latest标签
            if [[ ! "$clean_dest" =~ : ]]; then
              clean_dest="$clean_dest:latest"
            fi

            echo "🔄 同步操作: [$sources] → $clean_dest"
            
            # 强制使用HTTPS协议
            if docker buildx imagetools create -t "docker.io/$clean_dest" $sources; then
              echo "✅ 同步成功"
            else
              echo "::error::同步失败"
              error_occurred=true
            fi
            echo "----------------------------------------"
          done

          if $error_occurred; then
            echo "::error::存在失败的同步操作"
            exit 1
          fi

      - name: Generate report
        if: always()
        run: |
          echo "📊=== 最终报告 ==="
          echo "✅ 所有镜像已成功同步"
