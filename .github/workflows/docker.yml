name: Image Sync with Architecture Validation

on:
  workflow_dispatch:
    inputs:
      sync_mappings:
        description: '镜像同步映射（格式：源镜像=目标镜像，多个用逗号分隔）'
        required: false

jobs:
  image-sync:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DEST_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_SYNC_MAPPINGS: ${{ vars.DOCKER_SYNC_MAPPINGS }}
      BUILDKIT_PROGRESS: plain
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - name: Validate sync mappings
        id: validate-mappings
        run: |
          # 优先使用手动输入
          if [ -n "${{ github.event.inputs.sync_mappings }}" ]; then
            echo "使用手动输入的同步映射"
            PROCESSED_MAPPINGS="${{ github.event.inputs.sync_mappings }}"
          else
            echo "使用环境变量中的同步映射"
            PROCESSED_MAPPINGS="$DOCKER_SYNC_MAPPINGS"
          fi

          # 清理特殊字符并校验格式
          CLEAN_MAPPINGS=$(echo "$PROCESSED_MAPPINGS" | tr -d '\n' | tr -s ' ' | sed -e 's/ //g' -e 's/,+/,/g')
          if [ -z "$CLEAN_MAPPINGS" ]; then
            echo "::error::未配置同步映射，请设置DOCKER_SYNC_MAPPINGS环境变量或手动输入"
            exit 1
          fi

          # 验证至少包含一个有效映射对
          if ! grep -qE '^([^=]+=[^=]+)(,[^=]+=[^=]+)*$' <<< "$CLEAN_MAPPINGS"; then
            echo "::error::无效的映射格式，请使用'src=dst,src2=dst2'格式"
            exit 1
          fi

          echo "SYNC_MAPPINGS=${CLEAN_MAPPINGS}" >> $GITHUB_ENV

      - name: Setup build environment
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: Install system dependencies
        run: |
          echo "🛠️ Installing required tools..."
          sudo apt-get update && sudo apt-get install -y skopeo
          echo "✅ Dependencies installed"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}
        env:
          DOCKER_REGISTRY: index.docker.io

      - name: Execute image synchronization
        id: sync
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          # 颜色定义
          readonly COLOR_RESET="\033[0m"
          readonly COLOR_SRC="\033[1;34m"
          readonly COLOR_DST="\033[1;35m"
          readonly COLOR_OK="\033[1;32m"
          readonly COLOR_ERR="\033[1;31m"

          # 日志函数
          log() {
            local level=$1
            local message=$2
            local timestamp
            timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            case $level in
              "INFO") echo -e "${COLOR_OK}[${timestamp}] INFO: ${message}${COLOR_RESET}" >&2 ;;
              "WARN") echo -e "${COLOR_WARN}[${timestamp}] WARN: ${message}${COLOR_RESET}" >&2 ;;
              "ERROR") echo -e "${COLOR_ERR}[${timestamp}] ERROR: ${message}${COLOR_RESET}" >&2 ;;
            esac
          }

          # 结果收集变量
          success_images=""
          skipped_images=""
          failed_images=""

          # 解析环境变量到关联数组
          declare -A SYNC_MAP=()
          IFS=',' read -ra MAPPING_PAIRS <<< "$SYNC_MAPPINGS"
          for pair in "${MAPPING_PAIRS[@]}"; do
            key="${pair%%=*}"
            value="${pair#*=}"
            [[ -z "$key" || -z "$value" ]] && { echo "::error::无效映射对"; exit 1; }
            SYNC_MAP["$key"]="$value"
          done

          normalize_image() {
            local image_ref=$1 default_tag=$2 context=$3
            local image_name image_tag

            if [[ "$image_ref" == *":"* ]]; then
              image_name="${image_ref%:*}"
              image_tag="${image_ref#*:}"
            else
              image_name="$image_ref"
              image_tag="$default_tag"
            fi

            case $context in
              "source")
                if [[ "$image_name" == *"/"* ]]; then
                  printf "docker.io/%s:%s" "$image_name" "$image_tag"
                else
                  printf "docker.io/library/%s:%s" "$image_name" "$image_tag"
                fi
                ;;
              "target")
                if [[ "$image_name" == *"/"* ]]; then
                  printf "docker.io/%s:%s" "$image_name" "$image_tag"
                else
                  printf "docker.io/%s/%s:%s" "$DEST_REPO" "$image_name" "$image_tag"
                fi
                ;;
              *)
                log "ERROR" "无效上下文参数: $context"
                exit 1
                ;;
            esac
          }

          get_architecture() {
            local image=$1
            log "INFO" "获取架构信息：${COLOR_SRC}$image${COLOR_RESET}"
            # 新条件：仅检查是否存在 manifests 数组
            if raw_manifest=$(skopeo inspect --raw --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$image" 2>&1) &&
              jq -e '.manifests != null' <<< "$raw_manifest" &>/dev/null; then
              local arch_list
              arch_list=$(jq -r '
                [.manifests[].platform |
                  select(.os != "unknown" and .architecture != "unknown") |
                  "\(.os)/\(.architecture)\(if .variant != "" then "/"+.variant else "" end)"
                ] | unique | join(", ")' <<< "$raw_manifest")

              [[ -z "$arch_list" ]] && { log "ERROR" "无有效架构信息"; return 1; }
              log "INFO" "检测到多架构镜像：${arch_list// /,}"
              echo "$arch_list"
              return 0
            else
              local inspect_info os arch variant
              inspect_info=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$image" 2>/dev/null)
              os=$(jq -r '.Os // "unknown"' <<< "$inspect_info")
              arch=$(jq -r '.Architecture // "unknown"' <<< "$inspect_info")
              variant=$(jq -r '.Variant? // ""' <<< "$inspect_info")

              [[ "$os" == "unknown" || "$arch" == "unknown" ]] && {
                log "INFO" "单架构镜像：unknown"
                echo "unknown"
                return 0
              }

              local result="${os}/${arch}"
              [[ -n "$variant" ]] && result+="/$variant"
              case "$arch" in
                "arm64")
                  result="linux/arm64/v8"
                  ;;
                "arm")
                  [[ "$variant" == "v7" ]] && result="linux/arm/v7"
                  ;;
              esac
              log "INFO" "单架构镜像：$result"
              echo "$result"
            fi
          }

          sync_image() {
            local src=$1 dst=$2
            log "INFO" "启动同步：${COLOR_SRC}$src${COLOR_RESET} → ${COLOR_DST}$dst${COLOR_RESET}"
          
            # 同步模式判断联动修复
            if skopeo inspect --raw --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$src" | jq -e '.manifests != null' &>/dev/null; then
              log "INFO" "使用多架构同步模式"
              docker buildx imagetools create -t "$dst" "$src" || {
                log "ERROR" "多架构同步失败"
                return 1
              }
            else
              docker pull --quiet "$src" || { log "ERROR" "镜像拉取失败"; return 1; }
              docker tag "$src" "$dst" || { log "ERROR" "标签设置失败"; return 1; }
              docker push --quiet "$dst" || { log "ERROR" "推送失败"; return 1; }
            fi
            log "INFO" "同步完成"
          }

          # 处理同步循环
          for source_ref in "${!SYNC_MAP[@]}"; do
            echo "::group::🔄 Processing $source_ref"
            src_image=$(normalize_image "$source_ref" "latest" "source")
            dst_ref="${SYNC_MAP[$source_ref]}"
            dst_image=$(normalize_image "$dst_ref" "$(cut -d: -f2 <<< "$src_image")" "target")

            echo -e "${COLOR_OK}架构对比报告：${COLOR_RESET}"

            # 获取架构信息
            src_arch=$(get_architecture "$src_image" | tail -1)
            if target_info=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$dst_image" 2>/dev/null); then
              dst_arch=$(get_architecture "$dst_image" | tail -1)
              dst_exists=true
              dst_digest=$(jq -r '.Digest' <<< "$target_info")
            else
              dst_arch="N/A"
              dst_exists=false
            fi

            src_digest=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" --format '{{.Digest}}' "docker://$src_image")

            # 修正条件判断结构
            if $dst_exists && [[ "$dst_digest" == "$src_digest" ]]; then
              log "INFO" "源Digest: ${COLOR_SRC}$src_digest${COLOR_RESET}"
              log "INFO" "目标Digest: ${COLOR_DST}$dst_digest${COLOR_RESET}"
              log "INFO" "目标镜像已是最新，跳过同步"
              skipped_images+="⏩ ${src_image} → ${dst_image}"$'\n'
              echo "::endgroup::"
              continue
            fi

            # 执行同步
            if sync_image "$src_image" "$dst_image"; then
              success_images+="✅ ${src_image} → ${dst_image}"$'\n'
            else
              failed_images+="❌ ${src_image} → ${dst_image}"$'\n'
            fi
            
            echo "::endgroup::"
          done
          
          # 计算统计数据
          success_count=$(grep -c '✅' <<< "$success_images")
          skipped_count=$(grep -c '⏩' <<< "$skipped_images")
          failed_count=$(grep -c '❌' <<< "$failed_images")
          total=$((success_count + skipped_count + failed_count))
          success_percent=$((total > 0 ? success_count*100/total : 0))

          # 导出环境变量
          echo "SUCCESS_COUNT=$success_count" >> $GITHUB_ENV
          echo "SKIPPED_COUNT=$skipped_count" >> $GITHUB_ENV
          echo "FAILED_COUNT=$failed_count" >> $GITHUB_ENV
          echo "SUCCESS_PERCENT=$success_percent" >> $GITHUB_ENV  
          echo "HAS_SUCCESS=$([[ $success_count -gt 0 ]] && echo true || echo false)" >> $GITHUB_ENV
          
          # 导出原始列表
          echo "SUCCESS_LIST<<EOF" >> $GITHUB_ENV
          echo -e "${success_images%\\n}" >> $GITHUB_ENV  # 移除最后一个换行
          echo "EOF" >> $GITHUB_ENV
          echo "SKIPPED_LIST<<EOF" >> $GITHUB_ENV
          echo -e "${skipped_images%\\n}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "FAILED_LIST<<EOF" >> $GITHUB_ENV
          echo -e "${failed_images%\\n}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 发送通知
        uses: candies404/Multi-Channel-Notifier@latest
        if: ${{ env.HAS_SUCCESS == 'true' || failure() }}
        with:
          title: "🔁 镜像同步报告 - ${{ job.status }}"
          content: |
            ### **执行概况**
            📊 **统计**: 总数 (${{ env.SUCCESS_COUNT + env.SKIPPED_COUNT + env.FAILED_COUNT }}) | ✅ ${{ env.SUCCESS_COUNT }} | ⏩ ${{ env.SKIPPED_COUNT }} | ❌ ${{ env.FAILED_COUNT }}

            ### **同步详情**
            #### ✅ 成功同步 (${{ env.SUCCESS_COUNT }})
            ```diff
            ${{ join(format('+ {0}', split(env.SUCCESS_LIST, '\n')), '\n') }}
            ${{ env.SUCCESS_COUNT == 0 && '# 无成功同步任务' || '' }}
            ```

            #### ⏩ 跳过同步 (${{ env.SKIPPED_COUNT }})
            ```diff
            ${{ join(format('- {0}', split(env.SKIPPED_LIST, '\n')), '\n') }}
            ${{ env.SKIPPED_COUNT == 0 && '# 无跳过同步任务' || '' }}
            ```

            #### ❌ 同步失败 (${{ env.FAILED_COUNT }})
            ```diff
            ${{ join(format('! {0}', split(env.FAILED_LIST, '\n')), '\n') }}
            ${{ env.FAILED_COUNT == 0 && '# 所有镜像同步成功' || '' }}
            ```

            ### **性能统计**
            ```diff
            + 成功率: ${{ env.SUCCESS_PERCENT }}%
            - 总耗时: ${{ steps.sync.outputs.duration }}
            ${{ job.status == 'success' && '🎉 所有任务已完成' || '⚠️ 存在同步错误' }}
            ```
