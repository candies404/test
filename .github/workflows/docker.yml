name: Advanced Image Sync

on:
  workflow_dispatch:
    inputs:
      sync_mappings:
        description: '镜像同步规则（格式：源镜像=目标镜像，多个用逗号分隔）'
        required: false

jobs:
  sync-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: Validate and process SYNC_MAPPINGS
        id: process-sync-mappings
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          SYNC_MAPPINGS_INPUT: ${{ inputs.sync_mappings || vars.SYNC_MAPPINGS }}
        run: |
          # 基础校验
          if [ -z "$SYNC_MAPPINGS_INPUT" ]; then
            echo "::error::SYNC_MAPPINGS 未设置，请提供同步规则。"
            exit 1
          fi

          # 初始化变量
          declare -A processed_rules
          declare -A grouped_rules
          declare -a unique_sources
          IFS=',' read -ra RAW_RULES <<< "${SYNC_MAPPINGS_INPUT//$'\r'/}"  # 清除所有回车符

          # 增强的规则处理函数
          process_rule() {
            local source=$(echo "$1" | tr -d '\r' | xargs | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            local target=$(echo "$2" | tr -d '\r' | xargs | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

            # 自动补全源镜像名称
            if [[ "$source" != *"/"* && "$source" != *":"* ]]; then
              source="docker.io/library/$source"
            elif [[ "$source" == *":"* && "$source" != *"/"* ]]; then
              source="docker.io/library/${source/:/:}"
            fi

            # 自动生成目标镜像名称
            if [[ "$target" == *"+USERNAME"* ]]; then
              target="${target//+USERNAME/$DOCKERHUB_USERNAME}"
            fi

            # 严格格式校验
            if [[ ! "$target" =~ ^[a-z0-9]+([._-][a-z0-9]+)*(/[a-z0-9]+([._-][a-z0-9]+)*)*(:[a-zA-Z0-9_][a-zA-Z0-9_.-]*)?$ ]]; then
              echo "::error::无效的目标镜像格式: $target"
              exit 1
            fi

            echo "${source}=${target}"
          }

          # 处理原始规则
          for raw_rule in "${RAW_RULES[@]}"; do
            # 清理原始规则
            rule=$(echo "$raw_rule" | tr -d '\r' | xargs | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            [[ -z "$rule" ]] && continue

            # 拆分源和目标
            if [[ "$rule" == *"="* ]]; then
              source_part=$(echo "${rule%%=*}" | xargs)
              target_part=$(echo "${rule#*=}" | xargs)
            else
              source_part=$(echo "$rule" | xargs)
              target_part="${DOCKERHUB_USERNAME}/$(echo "$rule" | tr '/' '-' | tr -cd '[:alnum:]._-')-mirror"
            fi

            # 处理镜像名称
            full_rule=$(process_rule "$source_part" "$target_part") || exit 1
            IFS='=' read -r source_image dest_image <<< "$full_rule"

            # 有效性校验
            if [[ -z "$source_image" || -z "$dest_image" ]]; then
              echo "::warning::忽略无效规则: $rule"
              continue
            fi

            # 去重处理
            key="${source_image}=${dest_image}"
            if [[ -n "${processed_rules[$key]}" ]]; then
              continue
            fi
            processed_rules["$key"]=1

            # 分组处理
            if [[ -z "${grouped_rules[$dest_image]}" ]]; then
              grouped_rules["$dest_image"]="$source_image"
            else
              grouped_rules["$dest_image"]+=$'\n'"$source_image"
            fi

            # 收集源镜像
            if [[ ! " ${unique_sources[@]} " =~ " ${source_image} " ]]; then
              unique_sources+=("$source_image")
            fi
          done

          # 生成分组JSON（严格模式）
          grouped_json=$(jq -n '{}')
          for dest in "${!grouped_rules[@]}"; do
            # 使用换行符分割源镜像列表
            sources=()
            while IFS=$'\n' read -r line; do
              sources+=("$line")
            done <<< "${grouped_rules[$dest]}"

            # 生成严格格式的JSON数组
            sources_json=$(printf '%s\n' "${sources[@]}" | jq -R -s 'map(select(. != "" and . != null)) | unique')
            
            grouped_json=$(jq --arg dest "$dest" --argjson sources "$sources_json" '
              . + { ($dest): $sources }
            ' <<< "$grouped_json") || exit 1
          done

          # 生成唯一源列表（严格模式）
          unique_sources_json=$(printf '%s\n' "${unique_sources[@]}" | jq -R -s 'map(select(. != "")) | unique')

          # 安全输出到GITHUB_OUTPUT
          delimiter=$(openssl rand -hex 16)
          {
            echo "grouped_rules<<${delimiter}"
            jq -c . <<< "$grouped_json"
            echo "${delimiter}"
            
            echo "unique_sources<<${delimiter}"
            jq -c . <<< "$unique_sources_json"
            echo "${delimiter}"
            
            echo "total_rules=${#processed_rules[@]}"
          } >> "$GITHUB_OUTPUT"

      - name: Check architectures
        run: |
          unique_sources=${{ steps.process-sync-mappings.outputs.unique_sources }}
          images=$(echo "$unique_sources" | jq -r 'join(" ")')
          IFS=' ' read -ra IMAGES <<< "$images"

          for image in "${IMAGES[@]}"; do
            echo "处理镜像: $image"
            
            if ! raw_data=$(skopeo inspect --raw "docker://$image" 2>&1); then
              echo "[错误] 无法获取镜像: $raw_data"
              echo "----------------------------------------"
              continue
            fi

            if echo "$raw_data" | jq -e '.manifests and (.mediaType | contains("manifest.list"))' >/dev/null; then
              archs=$(echo "$raw_data" | jq -r '
                [.manifests[] | 
                .platform as $p |
                select($p.os != null and $p.architecture != null) |
                "\($p.os)/\($p.architecture)" +
                (if $p.variant and $p.variant != "" then "/\($p.variant)" else "" end)
                ] | unique | join(", ")
              ')
              type="多架构"
            elif echo "$raw_data" | jq -e '.manifests' >/dev/null; then
              archs=$(echo "$raw_data" | jq -r '
                [.manifests[] | 
                .platform as $p |
                select($p.os != null and $p.architecture != null) |
                "\($p.os)/\($p.architecture)" +
                (if $p.variant and $p.variant != "" then "/\($p.variant)" else "" end)
                ] | unique | join(", ")
              ')
              type="多架构"
            else
              inspect_info=$(skopeo inspect "docker://$image")
              os=$(echo "$inspect_info" | jq -r '.Os // "unknown"')
              arch=$(echo "$inspect_info" | jq -r '.Architecture // "unknown"')
              variant=$(echo "$inspect_info" | jq -r '.Variant? // ""')
              if [[ "$os" != "unknown" && "$arch" != "unknown" ]]; then
                archs="${os}/${arch}${variant:+/$variant}"
              else
                archs="<无效架构>"
              fi
              type="单架构"
            fi

            [ "$archs" = "" ] && archs="<无有效架构>"
            printf "镜像名称: %s\n架构类型: %s\n支持架构: %s\n%s\n" \
              "$image" "$type" "${archs}" "----------------------------------------"
          done

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Sync images
        id: sync-images
        run: |
          # 增加调试信息输出
          echo "处理后的同步规则:"
          echo "${{ steps.process-sync-mappings.outputs.grouped_rules }}" | jq .
          
          # 使用严格的JSON解析
          grouped_rules=$(echo '${{ steps.process-sync-mappings.outputs.grouped_rules }}' | jq -c .)
          total_rules=${{ steps.process-sync-mappings.outputs.total_rules }}
          SYNC_EXECUTED=0
          failed_rules=()

          # 使用jq严格解析
          echo "$grouped_rules" | jq -r 'to_entries[] | "\(.key)=\(.value | join(" "))"' | while IFS='=' read -r dest sources; do
            echo "🔄 正在同步: $sources → $dest"
            
            # 增加超时和重试机制
            if timeout 300 docker buildx imagetools create -t "$dest" $sources; then
              ((SYNC_EXECUTED++))
              echo "✅ 同步成功: $sources → $dest"
            else
              error_msg="同步失败: $sources → $dest"
              echo "::error::$error_msg"
              failed_rules+=("$error_msg")
            fi
            echo "----------------------------------------"
          done

          # 严格处理失败规则输出
          failed_rules_json=$(jq -nc '$ARGS.positional' --args "${failed_rules[@]}")
          {
            echo "SYNC_EXECUTED=$SYNC_EXECUTED"
            echo "failed_rules<<EOF"
            echo "$failed_rules_json"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Generate report
        run: |
          total_rules=${{ steps.process-sync-mappings.outputs.total_rules }}
          SYNC_EXECUTED=${{ steps.sync-images.outputs.SYNC_EXECUTED }}
          failed_rules=${{ steps.sync-images.outputs.failed_rules }}

          echo "📊=== 同步报告 ==="
          echo "🔢 处理总数 | $total_rules"
          echo "🟢 成功同步 | $SYNC_EXECUTED"
          echo "🔴 同步失败 | $(echo "$failed_rules" | jq 'length')"

          if [ $(echo "$failed_rules" | jq 'length') -gt 0 ]; then
            echo "🔥 失败详情："
            echo "$failed_rules" | jq -r '.[] | "  ‼️ \(.)"'
            exit 1
          fi
