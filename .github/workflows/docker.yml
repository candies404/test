name: Image Sync with Architecture Validation

on:
  workflow_dispatch:

jobs:
  image-sync:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DEST_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
      # 新增环境变量↓ 抑制构建工具的输出
      BUILDKIT_PROGRESS: plain
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
      - name: Setup build environment
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: Install system dependencies
        run: |
          echo "🛠️ Installing required tools..."
          sudo apt-get update && sudo apt-get install -y skopeo jq
          echo "✅ Dependencies installed"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}
        env:
          DOCKER_REGISTRY: index.docker.io

      - name: Execute image synchronization
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          declare -A SYNC_MAP=(
            ['nginx']='nginx-m'
            ['redis:7.0']='redis:7'
            ['chipsman/uptime-kuma']='uptime-kuma-back'
          )

          readonly COLOR_RESET="\033[0m"
          readonly COLOR_SRC="\033[1;34m"
          readonly COLOR_DST="\033[1;35m"
          readonly COLOR_OK="\033[1;32m"
          readonly COLOR_WARN="\033[1;33m"
          readonly COLOR_ERR="\033[1;31m"

          log() {
            local level=$1
            local message=$2
            local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            case $level in
              "INFO") echo -e "${COLOR_OK}[${timestamp}] INFO: ${message}${COLOR_RESET}" >&2 ;;
              "WARN") echo -e "${COLOR_WARN}[${timestamp}] WARN: ${message}${COLOR_RESET}" >&2 ;;
              "ERROR") echo -e "${COLOR_ERR}[${timestamp}] ERROR: ${message}${COLOR_RESET}" >&2 ;;
            esac
          }

          normalize_image() {
            local image_ref=$1 default_tag=$2 context=$3
            if [[ "$image_ref" == *":"* ]]; then
              local image_name="${image_ref%:*}" image_tag="${image_ref#*:}"
            else
              local image_name="$image_ref" image_tag="$default_tag"
            fi
            case $context in
              "source") 
                if [[ "$image_name" == *"/"* ]]; then
                  printf "docker.io/%s:%s" "$image_name" "$image_tag"
                else
                  printf "docker.io/library/%s:%s" "$image_name" "$image_tag"
                fi ;;
              "target") printf "docker.io/%s/%s:%s" "$DEST_REPO" "$image_name" "$image_tag" ;;
              *) log "ERROR" "无效上下文参数: $context"; exit 1 ;;
            esac
          }

          get_architecture() {
            local image=$1
            log "INFO" "获取架构信息：${COLOR_SRC}$image${COLOR_RESET}"

            # ================== 核心修正点 ===================
            # 旧条件：.manifests != null and (.mediaType | contains("manifest.list"))
            # 新条件：仅检查是否存在 manifests 数组
            if raw_manifest=$(skopeo inspect --raw --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$image" 2>&1) &&
              jq -e '.manifests != null' <<< "$raw_manifest" &>/dev/null; then
            # ================== 修正完成 ====================

              local arch_list=$(jq -r '
                [.manifests[].platform |
                  select(.os != "unknown" and .architecture != "unknown") |
                  "\(.os)/\(.architecture)\(if .variant != "" then "/"+.variant else "" end)"
                ] | unique | join(", ")' <<< "$raw_manifest")

              [[ -z "$arch_list" ]] && { log "ERROR" "无有效架构信息"; return 1; }
              log "INFO" "检测到多架构镜像：${arch_list// /,}"
              echo "$arch_list"
              return 0
            else
              local inspect_info=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$image" 2>/dev/null)
              local os=$(jq -r '.Os // "unknown"' <<< "$inspect_info")
              local arch=$(jq -r '.Architecture // "unknown"' <<< "$inspect_info")
              local variant=$(jq -r '.Variant? // ""' <<< "$inspect_info")

              [[ "$os" == "unknown" || "$arch" == "unknown" ]] && {
                log "INFO" "单架构镜像：unknown"
                echo "unknown"; return 0
              }

              local result="${os}/${arch}"
              [[ -n "$variant" ]] && result+="/$variant"
              case "$arch" in
                "arm64") result="linux/arm64/v8" ;;
                "arm") [[ "$variant" == "v7" ]] && result="linux/arm/v7" ;;
              esac
              log "INFO" "单架构镜像：$result"
              echo "$result"
            fi
          }

          sync_image() {
            local src=$1 dst=$2
            log "INFO" "启动同步：${COLOR_SRC}$src${COLOR_RESET} → ${COLOR_DST}$dst${COLOR_RESET}"
            
            # 同步模式判断联动修复
            if skopeo inspect --raw --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$src" |
               jq -e '.manifests != null' &>/dev/null; then
              log "INFO" "使用多架构同步模式"
              docker buildx imagetools create -t "$dst" "$src" || {
                log "ERROR" "多架构同步失败"; return 1
              }
            else
              docker pull --quiet "$src" || { log "ERROR" "镜像拉取失败"; return 1; }
              docker tag "$src" "$dst" || { log "ERROR" "标签设置失败"; return 1; }
              docker push --quiet "$dst" || { log "ERROR" "推送失败"; return 1; }
            fi
            log "INFO" "同步完成"
          }

          for source_ref in "${!SYNC_MAP[@]}"; do
            echo "::group::🔄 Processing $source_ref"
            src_image=$(normalize_image "$source_ref" "latest" "source")
            dst_ref="${SYNC_MAP[$source_ref]}"
            dst_image=$(normalize_image "$dst_ref" "$(cut -d: -f2 <<< "$src_image")" "target")
            
            # 新增输出过滤 ↓ 确保捕获正确架构信息
            src_arch=$(get_architecture "$src_image" | tail -1)
            if target_info=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$dst_image" 2>/dev/null); then
              dst_arch=$(get_architecture "$dst_image" | tail -1)
              dst_exists=true
            else
              dst_arch="N/A"
              dst_exists=false
            fi

            echo -e "\n${COLOR_OK}架构对比报告：${COLOR_RESET}"
            # 使用 column 格式化输出 ↓
            # paste <(echo "源架构" "$src_arch") <(echo "目标架构" "$dst_arch") | 
            # column -t -s $'\t' -o " │ "
            # echo

            src_digest=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" --format '{{.Digest}}' "docker://$src_image")
            if $dst_exists && [[ "$(jq -r '.Digest' <<< "$target_info")" == "$src_digest" ]]; then
              log "INFO" "目标镜像已是最新，跳过同步"
              echo "::endgroup::"
              continue
            fi
            sync_image "$src_image" "$dst_image"
            echo "::endgroup::"
          done
