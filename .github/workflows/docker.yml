name: Multi-arch Image Sync

on:
  workflow_dispatch:
    inputs:
      sync_mappings:
        description: '镜像同步规则（格式：源镜像=目标镜像，多个用逗号或换行分隔）'
        required: false

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  sync-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: Validate and process SYNC_MAPPINGS
        id: process-sync-mappings
        env:
          SYNC_MAPPINGS_INPUT: ${{ inputs.sync_mappings || vars.SYNC_MAPPINGS }}
        run: |
          # 输入预处理流程
          echo "原始输入: $SYNC_MAPPINGS_INPUT"
          processed_input=$(echo "$SYNC_MAPPINGS_INPUT" | 
            tr '\n' ',' |      # 换行转逗号
            tr -s ', ' |       # 压缩重复分隔符
            sed -E 's/^[, ]+//; s/[, ]+$//' |  # 移除首尾无效字符
            envsubst           # 替换环境变量
          )
          
          # 规则解析和验证
          declare -A valid_rules
          declare -A grouped_rules
          declare -a source_images
          
          IFS=',' read -ra RULES <<< "$processed_input"
          for rule in "${RULES[@]}"; do
            rule=$(echo "${rule}" | xargs | sed 's/\/\//\//g; s/\/$//')  # 标准化路径
            
            if [[ "$rule" =~ ^([^=]+)=([^=]+)$ ]]; then
              src="${BASH_REMATCH[1]}"
              dst="${BASH_REMATCH[2]}"
              
              # 自动补全官方镜像前缀
              if [[ ! "$src" =~ / ]] && [[ "$src" != *.*:* ]]; then
                src="docker.io/library/$src"
              fi
              
              # 去重检查
              if [[ -n "${valid_rules["$src=$dst"]}" ]]; then
                echo "::notice::忽略重复规则: $src => $dst"
                continue
              fi
              
              valid_rules["$src=$dst"]=1
              grouped_rules["$dst"]+=" $src"
              source_images+=("$src")
              
              echo " ✅ 有效规则: $src → $dst"
            else
              echo "::warning::无效规则格式: $rule"
            fi
          done
          
          # 输出处理结果
          echo "处理完成 ${#valid_rules[@]} 条有效规则"
          echo "unique_sources=$(printf '%s\n' "${source_images[@]}" | jq -R -s 'split("\n") | map(select(. != "")) | unique')" >> $GITHUB_OUTPUT
          echo "total_rules=${#valid_rules[@]}" >> $GITHUB_OUTPUT
          
          # 构建分组JSON
          grouped_json=$(jq -n '{}')
          for dst in "${!grouped_rules[@]}"; do
            sources=(${grouped_rules[$dst]})
            grouped_json=$(jq --arg dst "$dst" --argjson sources "${sources[*]}" '. + { ($dst): $sources }' <<< "$grouped_json")
          done
          echo "grouped_rules=$grouped_json" >> $GITHUB_OUTPUT

      - name: Architecture Validation
        run: |
          sources=${{ steps.process-sync-mappings.outputs.unique_sources }}
          echo "📦 需要检查的镜像列表:"
          echo "$sources" | jq -r '.[]'
          
          echo "$sources" | jq -r '.[]' | while read -r image; do
            echo "🔍 检查镜像架构: $image"
            manifest=$(skopeo inspect --raw "docker://$image" 2>&1 || true)
            
            if ! jq -e . <<< "$manifest" &>/dev/null; then
              echo "❌ 获取清单失败: $manifest"
              continue
            fi
            
            if jq -e '.manifests' <<< "$manifest" &>/dev/null; then
              archs=$(jq -r '[.manifests[].platform | "\(.os)/\(.architecture)\(.variant?//"")"] | unique | join(", ")' <<< "$manifest")
              echo "🔄 多架构镜像支持: $archs"
            else
              os=$(jq -r '.Os // "unknown"' <<< "$manifest")
              arch=$(jq -r '.Architecture // "unknown"' <<< "$manifest")
              echo "⚡ 单架构镜像: ${os}/${arch}"
            fi
          done

      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Execute Image Sync
        id: image-sync
        run: |
          grouped_rules='${{ steps.process-sync-mappings.outputs.grouped_rules }}'
          total_success=0
          total_failed=0
          failed_rules=()
          
          echo "$grouped_rules" | jq -r 'to_entries[] | "\(.key)=\(.value[])"' | while IFS="=" read -r dst src; do
            echo "🚀 同步操作: $src → $dst"
            if docker buildx imagetools create -t "$dst" "$src"; then
              ((total_success++))
              echo "✅ 同步成功: $src → $dst"
            else
              ((total_failed++))
              error_msg="$src → $dst"
              failed_rules+=("$error_msg")
              echo "::error::同步失败: $error_msg"
            fi
            echo "------------------------------"
          done
          
          # 写入输出变量
          echo "total_success=$total_success" >> $GITHUB_OUTPUT
          echo "total_failed=$total_failed" >> $GITHUB_OUTPUT
          echo "failed_rules=$(printf '%s\n' "${failed_rules[@]}" | jq -R -s 'map(select(. != ""))')" >> $GITHUB_OUTPUT

      - name: Generate Report
        run: |
          echo "📈 ===== 同步报告 ====="
          echo "总处理规则: ${{ steps.process-sync-mappings.outputs.total_rules }}"
          echo "成功数量: ${{ steps.image-sync.outputs.total_success }}"
          echo "失败数量: ${{ steps.image-sync.outputs.total_failed }}"
          
          if [[ ${{ steps.image-sync.outputs.total_failed }} -gt 0 ]]; then
            echo "❌ 失败详情:"
            echo "${{ steps.image-sync.outputs.failed_rules }}" | jq -r '.[]'
            exit 1
          else
            echo "🎉 所有镜像同步成功！"
          fi
