name: Image Arch Check and Sync Enhanced

on:
  workflow_dispatch:

jobs:
  check-and-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Process images
        run: |
          set -eo pipefail
          DEST_REPO="${{ secrets.DOCKERHUB_USERNAME }}"

          # ============== 新版配置解析部分 ==============
          SYNC_ENTRIES="nginx=nginx-m,redis:7.0=redis:7,chipsman/uptime-kuma=uptime-kuma-back,chipsman/one-hub=one-hub"

          declare -A SYNC_MAP
          IFS=',' read -ra entries <<< "$SYNC_ENTRIES"
          for entry in "${entries[@]}"; do
            IFS='=' read -r key value <<< "$entry"
            if [[ -z "$key" || -z "$value" ]]; then
              echo "::error::Invalid mapping entry: $entry"
              exit 1
            fi
            SYNC_MAP["$key"]="$value"
          done

          IMAGES=("${!SYNC_MAP[@]}")

          # ============== 主要处理循环 ==============
          for source_image in "${IMAGES[@]}"; do
            echo "::group::🔍 Processing $source_image"
            
            # ============== 源镜像解析 ==============
            if [[ "$source_image" == *":"* ]]; then
              source_name="${source_image%:*}"
              source_tag="${source_image#*:}"
            else
              source_name="$source_image"
              source_tag="latest"
            fi

            full_source="docker.io/$(
              [[ "$source_name" != *"/"* ]] \
                && echo "library/$source_name" \
                || echo "$source_name"
            ):${source_tag}"

            # ============== 目标镜像处理 ==============
            target_ref="${SYNC_MAP[$source_image]}"
            if [[ -z "$target_ref" ]]; then
              echo "::error::Missing target mapping for: $source_image"
              exit 1
            fi

            # 处理目标标签继承逻辑
            if [[ "$target_ref" == *":"* ]]; then
              target_name="${target_ref%:*}"
              target_tag="${target_ref#*:}"
            else
              target_name="$target_ref"
              target_tag="$source_tag"  # 继承源标签
            fi

            full_target="docker.io/${DEST_REPO}/${target_name}:${target_tag}"

            # ============== 源镜像验证 ==============
            echo "[验证] 源: ${full_source}"
            echo "     目标: ${full_target}"
            if ! skopeo inspect "docker://${full_source}" >/dev/null 2>&1; then
              echo "::error::无法访问源镜像"
              exit 1
            fi

            # ============== 架构检测部分（保持不变） ============== 
            echo "🔄 检测架构信息..."
            raw_manifest=$(skopeo inspect --raw "docker://${full_source}" | tee /tmp/manifest.txt)
            is_multiarch=false

            if echo "$raw_manifest" | jq -e '
              (.manifests != null) and
              (
                (.mediaType | contains("manifest.list")) or 
                (.mediaType | contains("vnd.docker.distribution.manifest.list")) or
                (.manifests | length > 0)
              )
            ' >/dev/null; then
              is_multiarch=true
              arch_list=$(echo "$raw_manifest" | jq -r '
                [.manifests[] | 
                  .platform as $p |
                # 添加有效平台过滤条件
                  select($p.os != null and $p.architecture != null and $p.os != "unknown" and $p.architecture != "unknown") |
                  "\($p.os)/\($p.architecture)\($p.variant // "" | if . != "" then "/"+. else "" end)"
                ] | unique | join(", ")
              ')
              echo "⚙️ 多架构支持: [${arch_list}]"
            else
              inspect_info=$(skopeo inspect "docker://${full_source}")
              os=$(echo "$inspect_info" | jq -r '.Os // "unknown"')
              arch=$(echo "$inspect_info" | jq -r '.Architecture // "unknown"')
              variant=$(echo "$inspect_info" | jq -r '.Variant? // ""')
              
              if [[ "$os" != "unknown" && "$arch" != "unknown" ]]; then
                echo "⚙️ 单架构: ${os}/${arch}${variant:+/${variant}}"
              else
                echo "::warning::无效架构 → OS: ${os}, Arch: ${arch}"
                arch_list="<invalid-platform>"
              fi
            fi

            # ============== 同步执行部分 ==============
            if [[ "$is_multiarch" == "true" ]]; then
              echo "🚢 使用buildx同步多架构镜像"
              docker buildx imagetools create -t "$full_target" "$full_source" || {
                echo "::error::buildx同步失败"
                exit 1
              }
            else
              echo "⚡ 同步单架构镜像"
              docker pull -q "$full_source"
              docker tag "$full_source" "$full_target"
              docker push --quiet "$full_target" || {
                echo "::error::推送失败"
                exit 1
              }
            fi

            echo "✅ $source_image → $target_ref 同步完成"
            echo "::endgroup::"
          done
