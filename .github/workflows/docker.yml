name: Multi-arch Image Sync

on:
  workflow_dispatch:
    inputs:
      sync_mappings:
        description: '镜像同步规则（格式：源镜像=目标镜像，多个用逗号分隔）'
        required: false

jobs:
  sync-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: Validate and process SYNC_MAPPINGS
        id: process-sync-mappings
        env:
          SYNC_MAPPINGS_INPUT: ${{ inputs.sync_mappings || vars.SYNC_MAPPINGS }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          if [ -z "$SYNC_MAPPINGS_INPUT" ]; then
            echo "::error::SYNC_MAPPINGS 未设置，请提供同步规则。"
            exit 1
          fi
          IFS=',' read -ra RULES <<< "$SYNC_MAPPINGS_INPUT"
          declare -A processed_rules
          declare -A grouped_rules
          declare -a unique_sources
          for rule in "${RULES[@]}"; do
            rule=$(echo "$rule" | xargs)
            [[ -z "$rule" ]] && continue
            if [[ "$rule" != *"="* ]]; then
              echo "::warning::忽略无效规则 '$rule'"
              continue
            fi
            source_image="${rule%%=*}"
            dest_image="${rule#*=}"
            source_image=$(echo "$source_image" | xargs)
            dest_image=$(echo "$dest_image" | xargs)
            [[ -z "$source_image" || -z "$dest_image" ]] && continue

            # 自动补全源镜像前缀
            if [[ "$source_image" != */* ]]; then
              source_image="docker.io/library/${source_image}"
            fi

            # 自动补全目标镜像前缀
            if [[ "$dest_image" != */* ]]; then
              dest_image="${DOCKERHUB_USERNAME}/${dest_image}"
            fi

            key="$source_image=$dest_image"
            [[ -n "${processed_rules[$key]}" ]] && continue
            processed_rules["$key"]=1
            if [[ -z "${grouped_rules[$dest_image]}" ]]; then
              grouped_rules["$dest_image"]="$source_image"
            else
              grouped_rules["$dest_image"]+=" $source_image"
            fi
            if [[ ! " ${unique_sources[@]} " =~ " ${source_image} " ]]; then
              unique_sources+=("$source_image")
            fi
          done
          grouped_json=$(jq -n '{}')
          for dest in "${!grouped_rules[@]}"; do
            sources=(${grouped_rules[$dest]})
            grouped_json=$(echo "$grouped_json" | jq --arg dest "$dest" --arg sources "${sources[*]}" '. + { ($dest): ($sources | split(" ")) }')
          done
          echo "grouped_rules=$(echo $grouped_json | jq -c)" >> $GITHUB_OUTPUT
          echo "unique_sources=$(jq -c -n '$unique_sources' --args ${unique_sources[@]})" >> $GITHUB_OUTPUT
          echo "total_rules=${#processed_rules[@]}" >> $GITHUB_OUTPUT

      - name: Check architectures
        run: |
          unique_sources=${{ steps.process-sync-mappings.outputs.unique_sources }}
          images=$(echo "$unique_sources" | jq -r 'join(" ")')
          IFS=' ' read -ra IMAGES <<< "$images"
          for image in "${IMAGES[@]}"; do
            echo "处理镜像: $image"
            
            if ! raw_data=$(skopeo inspect --raw "docker://$image" 2>&1); then
              echo "[错误] 无法获取镜像: $raw_data"
              echo "----------------------------------------"
              continue
            fi
            if echo "$raw_data" | jq -e '.manifests and (.mediaType | contains("manifest.list"))' >/dev/null; then
              archs=$(echo "$raw_data" | jq -r '
                [.manifests[] | 
                .platform as $p |
                select($p.os != null and $p.architecture != null) |
                "\($p.os)/\($p.architecture)" +
                (if $p.variant and $p.variant != "" then "/\($p.variant)" else "" end)
                ] | unique | join(", ")
              ')
              type="多架构"
            elif echo "$raw_data" | jq -e '.manifests' >/dev/null; then
              archs=$(echo "$raw_data" | jq -r '
                [.manifests[] | 
                .platform as $p |
                select($p.os != null and $p.architecture != null) |
                "\($p.os)/\($p.architecture)" +
                (if $p.variant and $p.variant != "" then "/\($p.variant)" else "" end)
                ] | unique | join(", ")
              ')
              type="多架构"
            else
              inspect_info=$(skopeo inspect "docker://$image")
              os=$(echo "$inspect_info" | jq -r '.Os // "unknown"')
              arch=$(echo "$inspect_info" | jq -r '.Architecture // "unknown"')
              variant=$(echo "$inspect_info" | jq -r '.Variant? // ""')
              if [[ "$os" != "unknown" && "$arch" != "unknown" ]]; then
                archs="${os}/${arch}${variant:+/$variant}"
              else
                archs="<无效架构>"
              fi
              type="单架构"
            fi
            [ "$archs" = "" ] && archs="<无有效架构>"
            printf "镜像名称: %s\n架构类型: %s\n支持架构: %s\n%s\n" \
              "$image" "$type" "${archs}" "----------------------------------------"
          done

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Sync images
        id: sync-images
        run: |
          grouped_rules='${{ steps.process-sync-mappings.outputs.grouped_rules }}'
          total_rules=${{ steps.process-sync-mappings.outputs.total_rules }}
          SYNC_EXECUTED=0
          failed_rules=()
          
          # 使用进程替换避免子shell问题
          while IFS== read -r dest sources; do
            echo "🔄 正在同步: $sources → $dest"
            if docker buildx imagetools create -t "$dest" $sources; then
              ((SYNC_EXECUTED++))
              echo "✅ 同步成功: $sources → $dest"
            else
              error_msg="同步失败: $sources → $dest"
              echo "::error::$error_msg"
              failed_rules+=("$error_msg")
            fi
            echo "----------------------------------------"
          done < <(echo "$grouped_rules" | jq -r 'to_entries[] | "\(.key)=\(.value | join(" "))"')

          # 显式设置退出状态
          if [ ${#failed_rules[@]} -gt 0 ]; then
            echo "::error::存在失败的同步任务"
            exit 1
          fi

          failed_rules_json=$(jq -c -n '$ARGS.positional' --args "${failed_rules[@]}")
          echo "SYNC_EXECUTED=$SYNC_EXECUTED" >> $GITHUB_OUTPUT
          echo "failed_rules=$failed_rules_json" >> $GITHUB_OUTPUT

      - name: Generate report
        run: |
          total_rules=${{ steps.process-sync-mappings.outputs.total_rules }}
          SYNC_EXECUTED=${{ steps.sync-images.outputs.SYNC_EXECUTED }}
          failed_rules=${{ steps.sync-images.outputs.failed_rules }}
          echo "📊=== 同步报告 ==="
          echo "🔢 处理总数 | $total_rules"
          echo "🟢 成功同步 | $SYNC_EXECUTED"
          echo "🔴 同步失败 | $(echo "$failed_rules" | jq 'length')"
          if [ $(echo "$failed_rules" | jq 'length') -gt 0 ]; then
            echo "🔥 失败详情："
            echo "$failed_rules" | jq -r '.[] | "  ‼️ \(.)"'
            exit 1
          fi
