name: Docker 镜像同步优化版

on:
  workflow_dispatch:
    inputs:
      sync_mappings:
        description: '镜像同步映射（格式：源镜像=目标镜像，多个用逗号分隔）'
        required: false

jobs:
  image-sync:
    name: 镜像同步
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DEST_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_SYNC_MAPPINGS: ${{ vars.DOCKER_SYNC_MAPPINGS }}
      BUILDKIT_PROGRESS: plain

    steps:
      - name: 验证镜像同步格式
        id: validate-mappings
        run: |
          # 参数优先级处理
          PROCESSED_MAPPINGS="${INPUT_SYNC_MAPPINGS:-${DOCKER_SYNC_MAPPINGS}}"
          
          # 增强空值检查
          if [[ -z "${PROCESSED_MAPPINGS}" ]]; then
            echo "::error::Missing sync mappings"
            exit 1
          fi

          # 输入清洗强化处理
          CLEAN_MAPPINGS=$(echo "${PROCESSED_MAPPINGS}" | \
            tr -d '\n' | tr -s ' ' | \
            sed -E 's/[[:space:]]+//g; s/,+/,/g; s/^,//; s/,$//')

          # 优化正则表达式验证
          if ! grep -qE '^([a-zA-Z0-9][a-zA-Z0-9_.\-/]*=[a-zA-Z0-9][a-zA-Z0-9_.\-/]*)(,[a-zA-Z0-9][a-zA-Z0-9_.\-/]*=[a-zA-Z0-9][a-zA-Z0-9_.\-/]*)*$' <<< "${CLEAN_MAPPINGS}"; then
            echo "::error::Invalid mapping format"
            exit 1
          fi

          echo "SYNC_MAPPINGS=${CLEAN_MAPPINGS}" >> "${GITHUB_ENV}"

      - name: 设置多架构构建环境
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: |
            network=host
            image=moby/buildkit:master-rootless
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled

      - name: 安装 skopeo
        run: |
          # 增加安装校验
          if ! sudo apt-get update -qq && sudo apt-get install -y skopeo; then
            echo "::error::Skopeo installation failed"
            exit 1
          fi
          skopeo --version | awk '{printf "✅ skopeo v%s installed", $3}'

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${DOCKERHUB_USER}
          password: ${DOCKERHUB_TOKEN}
        env:
          DOCKER_REGISTRY: index.docker.io

      - name: 执行镜像同步
        id: sync
        run: |
          #!/usr/bin/env bash
          set -eo pipefail
          shopt -s inherit_errexit

          # 增强版日志系统
          declare -A LOG_COLORS=(
            [INFO]="\033[1;32m"
            [WARN]="\033[1;33m" 
            [ERROR]="\033[1;31m"
          )
          log() {
            local level="${1}"
            local message="${2}"
            local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            echo -e "${LOG_COLORS[$level]}[${timestamp}] ${level}: ${message}\033[0m" >&2
          }

          # 同步状态追踪器
          declare -A SYNC_RESULTS=(
            [TOTAL]=0
            [SUCCESS]=0
            [SKIPPED]=0
            [FAILED]=0
          )

          # 镜像处理上下文
          process_mapping() {
            local source_ref="${1}"
            local dst_ref="${2}"
            
            log INFO "🚦 开始处理映射对：${source_ref} → ${dst_ref}"
            
            # 增强镜像正规化处理
            normalize_image() {
              local ref="${1}"
              local default_tag="${2}"
              local context="${3}"
              
              if [[ ! "${ref}" =~ .*/.* ]]; then
                [[ "${context}" == "source" ]] && ref="library/${ref}"
                [[ "${context}" == "target" ]] && ref="${DEST_REPO}/${ref}"
              fi
              
              if [[ ! "${ref}" =~ : ]]; then
                ref+=":${default_tag:-latest}"
              fi
              
              echo "docker.io/${ref}"
            }

            local src_image dst_image
            src_image=$(normalize_image "${source_ref}" "latest" "source")
            dst_image=$(normalize_image "${dst_ref}" "$(cut -d: -f2 <<< "${src_image}")" "target")

            # 架构比对优化
            compare_architectures() {
              local src="${1}" dst="${2}"
              
              # 使用并行处理提升性能
              local src_info dst_info
              src_info=$(skopeo inspect --raw --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://${src}" 2>&1)
              dst_info=$(skopeo inspect --raw --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://${dst}" 2>&1)
              
              # 多架构处理逻辑优化
              jq_arch_filter='[.manifests[].platform | 
                select(.os != "unknown" and .architecture != "unknown") |
                "\(.os)/\(.architecture)\(if .variant != "" then "/"+.variant else "" end)"] | unique'
                
              src_archs=$(jq -r "${jq_arch_filter}" <<< "${src_info}" | tr -d '\n')
              dst_archs=$(jq -r "${jq_arch_filter}" <<< "${dst_info}" | tr -d '\n')

              [[ "${src_archs}" == "${dst_archs}" ]] && return 0 || return 1
            }

            # 镜像同步流程控制
            if compare_architectures "${src_image}" "${dst_image}"; then
              log INFO "⏭️ 架构一致，跳过同步"
              SYNC_RESULTS[SKIPPED]=$((SYNC_RESULTS[SKIPPED]+1))
              return
            fi

            # 增加重试机制
            for attempt in {1..3}; do
              if docker buildx imagetools create -t "${dst_image}" "${src_image}"; then
                SYNC_RESULTS[SUCCESS]=$((SYNC_RESULTS[SUCCESS]+1))
                log INFO "✅ 同步成功 (尝试次数: ${attempt})"
                return 0
              else
                log WARN "⚠️ 同步失败 (尝试次数: ${attempt})"
                sleep $((attempt * 5))
              fi
            done
            
            SYNC_RESULTS[FAILED]=$((SYNC_RESULTS[FAILED]+1))
            log ERROR "❌ 同步失败"
            return 1
          }

          # 主处理循环
          IFS=',' read -ra MAPPING_PAIRS <<< "${SYNC_MAPPINGS}"
          SYNC_RESULTS[TOTAL]=${#MAPPING_PAIRS[@]}
          
          for pair in "${MAPPING_PAIRS[@]}"; do
            IFS='=' read -r src dst <<< "${pair}"
            process_mapping "${src}" "${dst}" || true
          done

          # 生成数据报告
          report=$(cat <<EOF
          📊 同步报告：
          总数：${SYNC_RESULTS[TOTAL]}
          ✅ 成功：${SYNC_RESULTS[SUCCESS]}
          ⏩ 跳过：${SYNC_RESULTS[SKIPPED]}
          ❌ 失败：${SYNC_RESULTS[FAILED]}
          EOF
          )
          
          echo "NOTIFICATION_CONTENT<<EOF" >> "${GITHUB_ENV}"
          echo "${report}" >> "${GITHUB_ENV}"
          echo "EOF" >> "${GITHUB_ENV}"

      - name: 发送增强通知
        uses: candies404/Multi-Channel-Notifier@latest
        if: always()
        with:
          title: "镜像同步报告"
          content: |
            ${{ env.NOTIFICATION_CONTENT }}
          hitokoto: false
          wpush_key: ${{ secrets.WPUSH_KEY }}
