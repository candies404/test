name: Image Sync with Architecture Validation

on:
  workflow_dispatch:

jobs:
  image-sync:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DEST_REPO: ${{ secrets.DOCKERHUB_USERNAME }}

    steps:
      - name: Setup build environment
        uses: docker/setup-buildx-action@v3

      - name: Install system dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y skopeo

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Execute image synchronization
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          # 同步配置
          declare -A SYNC_MAP=(
            ['nginx']='nginx-m'
            ['redis:7.0']='redis:7'
            ['chipsman/uptime-kuma']='uptime-kuma-back'
          )

          # 日志颜色定义
          readonly COLOR_RESET="\033[0m"
          readonly COLOR_SRC="\033[38;5;111m"
          readonly COLOR_DST="\033[38;5;213m"
          readonly COLOR_HL="\033[38;5;223m"
          readonly COLOR_OK="\033[38;5;121m"
          readonly COLOR_WARN="\033[38;5;223m"
          readonly COLOR_ERR="\033[38;5;203m"

          # 带时间戳的日志函数
          log() {
            local level=$1
            local message=$2
            local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            local color
            case $level in
              "INFO") color="$COLOR_OK" ;;
              "WARN") color="$COLOR_WARN" ;;
              "ERROR") color="$COLOR_ERR" ;;
            esac
            echo -e "${COLOR_HL}[${timestamp}] ${color}${level}:${COLOR_RESET} ${message}"
          }

          format_arch_report() {
            local src=$1
            local dst=$2
            local src_arch=$3
            local dst_arch=$4
            
            echo -e "\n\033[38;5;117m▍ ▏ 架构对比 ${COLOR_RESET}"
            printf "%-65s %65s\n" \
              "${COLOR_SRC}➜ Source: ${src}${COLOR_RESET}" \
              "${COLOR_DST}➜ Target: ${dst}${COLOR_RESET}"
            echo -e "${COLOR_HL}┏$(printf '━%.0s' {1..38})┳$(printf '━%.0s' {1..38})┓"
            printf "┃%-38s ┃ %-38s┃\n" \
              "  ${COLOR_SRC}${src_arch}${COLOR_RESET}" \
              "  ${COLOR_DST}${dst_arch}${COLOR_RESET}"
            echo -e "┗$(printf '━%.0s' {1..38})┻$(printf '━%.0s' {1..38})┛${COLOR_RESET}"
          }

          get_architecture() {
            local image=$1
            local result=""
            
            if raw_manifest=$(skopeo inspect --raw "docker://${image}" 2>/dev/null); then
              if jq -e '.manifests != null' <<< "$raw_manifest" &>/dev/null; then
                result=$(jq -r '.manifests[].platform | "\(.os)/\(.architecture)"' <<< "$raw_manifest" | sort -u | tr '\n' ',')
                result="${result%,}"
              else
                local os=$(jq -r '.Architecture' <<< "$(skopeo inspect "docker://${image}")")
                local arch=$(jq -r '.Os' <<< "$(skopeo inspect "docker://${image}")")
                result="${arch}/${os}"
              fi
            fi
            [[ -z "$result" ]] && result="unknown"
            echo "$result"
          }

          sync_image() {
            local src=$1
            local dst=$2

            if docker buildx imagetools inspect "$src" | grep -q "Manifest list"; then
              log "INFO" "🔁 使用多架构同步模式"
              docker buildx imagetools create -t "$dst" "$src"
            else
              log "INFO" "⬇️ 拉取单架构镜像"
              docker pull --quiet "$src"
              docker tag "$src" "$dst"
              docker push --quiet "$dst"
            fi
          }

          for source_ref in "${!SYNC_MAP[@]}"; do
            echo "::group::🔄 Processing ${source_ref}"
            
            src_image="docker.io/${source_ref}"
            dst_image="docker.io/${DEST_REPO}/${SYNC_MAP[$source_ref]}"
            
            log "INFO" "🛫 开始同步流程"
            log "INFO" "源镜像: ${COLOR_SRC}${src_image}${COLOR_RESET}"
            log "INFO" "目标镜像: ${COLOR_DST}${dst_image}${COLOR_RESET}"

            # 架构分析
            log "INFO" "🔍 执行架构检查..."
            src_arch=$(get_architecture "$src_image")
            dst_arch=$(get_architecture "$dst_image" 2>/dev/null || echo "<新镜像>")
            
            format_arch_report "$src_image" "$dst_image" "$src_arch" "$dst_arch"

            # 摘要检查
            src_digest=$(skopeo inspect --format '{{.Digest}}' "docker://${src_image}")
            dst_digest=$(skopeo inspect --format '{{.Digest}}' "docker://${dst_image}" 2>/dev/null || echo "empty")

            log "INFO" "🔖 摘要比对："
            echo -e "${COLOR_SRC}  ${src_digest:0:12}...${src_digest: -4}${COLOR_RESET}"
            echo -e "${COLOR_DST}  ${dst_digest:0:12}...${dst_digest: -4}${COLOR_RESET}"

            if [[ "$src_digest" == "$dst_digest" ]]; then
              log "INFO" "✅ 无需同步：目标镜像已是最新版本"
            else
              log "INFO" "🔄 发现更新：开始同步镜像"
              sync_image "$src_image" "$dst_image"
              log "INFO" "🎉 同步操作成功完成"
            fi

            echo -e "${COLOR_HL}━${COLOR_RESET}"
            echo "::endgroup::"
          done
