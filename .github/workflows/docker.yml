name: Image Sync with Architecture Validation

on:
  workflow_dispatch:
    inputs:
      sync_mappings:
        description: '镜像同步映射（格式：源镜像=目标镜像，多个用逗号分隔）'
        required: false

jobs:
  image-sync:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DEST_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_SYNC_MAPPINGS: ${{ vars.DOCKER_SYNC_MAPPINGS }}
      BUILDKIT_PROGRESS: plain

    steps:
      # 输入验证步骤
      - name: Validate sync mappings
        id: validate-mappings
        run: |
          echo "🔍 开始验证同步映射..."
          
          # 优先获取手动输入，没有则使用预定义变量
          PROCESSED_MAPPINGS="${{ github.event.inputs.sync_mappings || env.DOCKER_SYNC_MAPPINGS }}"
          
          # 清理输入中的空白和重复分隔符
          CLEAN_MAPPINGS=$(tr -d '\n' <<< "$PROCESSED_MAPPINGS" | sed -e 's/\s*//g' -e 's/,+/,/g')
          
          # 空值检查
          if [[ -z "$CLEAN_MAPPINGS" ]]; then
            echo "::error::❌ 同步映射不能为空，请检查输入！"
            exit 1
          fi
          
          # 格式有效性验证 (正则表达式匹配 src=dst 模式)
          if ! grep -qE '^([^=]+=[^=]+)(,[^=]+=[^=]+)*$' <<< "$CLEAN_MAPPINGS"; then
            echo "::error::❌ 无效的映射格式，正确示例：src1=dst1,src2=dst2"
            exit 1
          fi
          
          echo "SYNC_MAPPINGS=${CLEAN_MAPPINGS}" >> $GITHUB_ENV
          echo "✅ 同步映射验证通过：${CLEAN_MAPPINGS}"

      # 准备构建环境
      - name: Setup build environment
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host  # 启用网络共享模式
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled  # 启用实验特性

      # 安装必要工具
      - name: Install skopeo
        run: |
          echo "🛠️ 正在安装 skopeo..."
          sudo apt-get update -qq && sudo apt-get install -y skopeo
          echo "✅ skopeo $(skopeo --version | awk '{print $3}') 安装完成"

      # Docker Hub 认证
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}
        env:
          DOCKER_REGISTRY: index.docker.io

      # 核心同步步骤
      - name: Execute image synchronization
        id: sync
        env:
          COLOR_RESET: \033[0m   # 颜色代码
          COLOR_SRC: \033[1;34m  # 源镜像颜色
          COLOR_DST: \033[1;35m  # 目标镜像颜色
        run: |
          # 初始化同步结果存储
          declare -A SYNC_MAP=()
          successes=()
          skipped=()
          failures=()

          echo "======= 同步配置 ======="
          echo "总映射数量：${#PAIRS[@]}"
          
          # 解析同步映射
          IFS=',' read -ra PAIRS <<< "$SYNC_MAPPINGS"
          for pair in "${PAIRS[@]}"; do
            IFS='=' read -r src dst <<< "$pair"
            SYNC_MAP["$src"]="$dst"
            echo "🔗 映射对：${src} → ${dst}"
          done

          # 镜像引用规范化函数 (支持自动补全 docker.io 前缀)
          normalize_ref() {
            local ref=$1 context=$2
            
            # 自动补全tag
            if [[ "$ref" != *":"* ]]; then
              echo "⚙️  自动补全 ${ref} 的标签为 :latest"
              ref+=":latest"
            fi
            
            # 处理仓库前缀
            if [[ "$ref" != *"docker.io"* ]]; then
              if [[ "$context" == "source" && "$ref" == *"/"* ]]; then
                ref="docker.io/$ref"
              else
                ref="docker.io/$DEST_REPO/${ref%:*}"
              fi
            fi
            
            # 修复重复前缀
            echo "${ref/docker.io\/docker.io/docker.io}"
          }

          # 架构检测函数
          get_arch() {
            local image=$1
            echo "🔬 正在检测 $image 的架构..."
            
            # 获取镜像清单信息
            if ! raw_manifest=$(skopeo inspect --raw --creds "$DOCKERHUB_USER:$DOCKERHUB_TOKEN" "docker://$image" 2>&1); then
              echo "❌ 无法获取镜像清单：$raw_manifest"
              return 1
            fi
            
            # 判断是否为多架构镜像
            if jq -e '.manifests' <<< "$raw_manifest" >/dev/null; then
              echo "📦 检测到多架构镜像"
              jq -r '[.manifests[].platform | "\(.os)/\(.architecture)\(.variant? | select(. != null) | "/"+.)"] | unique[]' <<< "$raw_manifest" | paste -sd,
              return $?
            else
              # 处理单架构镜像
              inspect=$(skopeo inspect --creds "$DOCKERHUB_USER:$DOCKERHUB_TOKEN" "docker://$image")
              os=$(jq -r '.Os // "unknown"' <<< "$inspect")
              arch=$(jq -r '.Architecture // "unknown"' <<< "$inspect")
              variant=$(jq -r '.Variant? // empty' <<< "$inspect")
              
              [[ -n "$variant" ]] && full_arch="$os/$arch/$variant" || full_arch="$os/$arch"
              echo "🧬 单架构信息：$full_arch"
              [[ "$os/$arch" != "unknown/unknown" ]] && echo "$full_arch" || echo "unknown"
            fi
          }

          # 主同步循环
          while read -r src_ref; do
            dst_ref="${SYNC_MAP[$src_ref]}"
            
            # 标准化镜像地址
            src_image=$(normalize_ref "$src_ref" source)
            dst_image=$(normalize_ref "$dst_ref" target)
            
            echo -e "\n========== 同步任务 =========="
            echo -e "源：${COLOR_SRC}$src_image${COLOR_RESET}"
            echo -e "目标：${COLOR_DST}$dst_image${COLOR_RESET}"

            # 架构检测
            if ! src_arch=$(get_arch "$src_image"); then
              echo "❌ 源镜像架构检测失败"
              failures+=("$src_image")
              continue
            fi
            echo "🏛️  源架构：$src_arch"

            # 摘要检查
            echo "🔎 检查镜像差异性..."
            src_digest=$(skopeo inspect --creds "$DOCKERHUB_USER:$DOCKERHUB_TOKEN" --format '{{.Digest}}' "docker://$src_image")
            if dst_digest=$(skopeo inspect --creds "$DOCKERHUB_USER:$DOCKERHUB_TOKEN" --format '{{.Digest}}' "docker://$dst_image" 2>/dev/null); then
              echo "📊 摘要比对："
              echo "  SRC: $src_digest"
              echo "  DST: $dst_digest"
              if [[ "$src_digest" == "$dst_digest" ]]; then
                echo "✅ 镜像内容一致，跳过同步"
                skipped+=("$src_image")
                continue
              fi
            else
              echo "🆕 目标镜像不存在，开始同步..."
            fi

            # 执行同步
            echo "🚀 开始同步操作..."
            if skopeo copy --all \
              --src-creds "$DOCKERHUB_USER:$DOCKERHUB_TOKEN" \
              --dest-creds "$DOCKERHUB_USER:$DOCKERHUB_TOKEN" \
              "docker://$src_image" \
              "docker://$dst_image"; then
              echo -e "🎉 ${COLOR_DST}$dst_image${COLOR_RESET} 同步成功！"
              successes+=("$src_image→$dst_image")
            else
              echo -e "💥 ${COLOR_SRC}$src_image${COLOR_RESET} 同步失败！"
              failures+=("$src_image")
            fi
          done < <(printf '%s\n' "${!SYNC_MAP[@]}")

          # 生成结果报告
          echo "NOTIFICATION_CONTENT<<EOF" >> $GITHUB_ENV
          echo "📦 同步作业完成报告：" >> $GITHUB_ENV
          echo "✅ 成功项目 (${#successes[@]})：" >> $GITHUB_ENV
          printf " - %s\n" "${successes[@]}" >> $GITHUB_ENV
          [[ ${#skipped[@]} -gt 0 ]] && {
            echo "🔜 跳过项目 (${#skipped[@]})：" >> $GITHUB_ENV
            printf " - %s\n" "${skipped[@]}" >> $GITHUB_ENV
          }
          [[ ${#failures[@]} -gt 0 ]] && {
            echo "❌ 失败项目 (${#failures[@]})：" >> $GITHUB_ENV
            printf " - %s\n" "${failures[@]}" >> $GITHUB_ENV
          }
          echo "EOF" >> $GITHUB_ENV
          echo "HAS_SUCCESS=$([[ ${#successes[@]} -gt 0 ]] && echo true || echo false)" >> $GITHUB_ENV

      # 结果通知
      - name: 发送通知
        uses: candies404/Multi-Channel-Notifier@latest
        if: always()  # 总是发送通知
        with:
          title: "🛰️ 镜像同步报告"
          content: |
            ${{ env.NOTIFICATION_CONTENT }}
            📅 执行时间：${{ github.workflow_run.created_at }}
          hitokoto: false
          wpush_key: ${{ secrets.WPUSH_KEY }}
