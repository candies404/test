name: Image Sync with Enhanced Logging

on:
  workflow_dispatch:

jobs:
  image-sync:
    runs-on: ubuntu-latest
    env:
      DEST_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_CREDS: ${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: Setup build environment
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Install required tools
        run: |
          echo "🛠️ Installing system dependencies..."
          sudo apt-get update && sudo apt-get install -y skopeo

      - name: Configure registry authentication
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        env:
          DOCKER_REGISTRY: index.docker.io

      - name: Perform image synchronization
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          # 配置同步规则
          declare -A SYNC_MAP=(
            ['nginx']='nginx-m'
            ['redis:7.0']='redis:7'
            ['chipsman/uptime-kuma']='uptime-kuma-back'
          )

          # 日志颜色定义
          readonly COLOR_RESET="\033[0m"
          readonly COLOR_SRC="\033[1;34m"
          readonly COLOR_DST="\033[1;35m"
          readonly COLOR_OK="\033[1;32m"
          readonly COLOR_WARN="\033[1;33m"
          readonly COLOR_ERR="\033[1;31m"

          # 功能函数：带时间戳的日志
          log() {
            local level=$1
            local message=$2
            local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            case $level in
              "INFO") echo -e "${COLOR_OK}[${timestamp}] INFO: ${message}${COLOR_RESET}" ;;
              "WARN") echo -e "${COLOR_WARN}[${timestamp}] WARN: ${message}${COLOR_RESET}" >&2 ;;
              "ERROR") echo -e "${COLOR_ERR}[${timestamp}] ERROR: ${message}${COLOR_RESET}" >&2 ;;
            esac
          }

          # 镜像地址规范化
          normalize_image() {
            local image_ref=$1
            local default_tag=$2

            # 分离名称和标签
            if [[ "$image_ref" == *":"* ]]; then
              local image_name="${image_ref%:*}"
              local image_tag="${image_ref#*:}"
            else
              local image_name="$image_ref"
              local image_tag="$default_tag"
            fi

            # 添加仓库前缀
            if [[ "$image_name" == *"/"* ]]; then
              printf "docker.io/%s:%s" "$image_name" "$image_tag"
            else
              printf "docker.io/library/%s:%s" "$image_name" "$image_tag"
            fi
          }

          # 架构信息获取
          get_architecture() {
            local image=$1
            log "INFO" "获取架构信息：${COLOR_SRC}${image}${COLOR_RESET}"
            
            local manifest
            if ! manifest=$(skopeo inspect --raw --creds "$DOCKERHUB_CREDS" "docker://${image}" 2>&1); then
              log "ERROR" "无法获取镜像清单：${manifest}"
              return 1
            fi

            if jq -e '.manifests != null' <<< "$manifest" &>/dev/null; then
              # 多架构镜像处理
              local arch_list=$(jq -r '[.manifests[].platform | 
                "\(.os)/\(.architecture)\(if .variant then "/"+.variant else "" end)"
              ] | unique | join(", ")' <<< "$manifest")
              log "INFO" "检测到多架构镜像：${arch_list}"
              echo "$arch_list"
            else
              # 单架构镜像处理
              local os=$(jq -r '.Os // "unknown"' <<< "$manifest")
              local arch=$(jq -r '.Architecture // "unknown"' <<< "$manifest")
              local variant=$(jq -r '.Variant? // ""' <<< "$manifest")
              local result="${os}/${arch}${variant:+"/$variant"}"
              [[ "$result" == "unknown/unknown" ]] && result="unknown"
              log "INFO" "单架构镜像：${result}"
              echo "$result"
            fi
          }

          # 镜像同步执行
          sync_image() {
            local src=$1
            local dst=$2

            log "INFO" "启动同步：${COLOR_SRC}${src}${COLOR_RESET} → ${COLOR_DST}${dst}${COLOR_RESET}"
            
            if skopeo inspect --raw --creds "$DOCKERHUB_CREDS" "docker://${src}" | jq -e '.manifests != null' &>/dev/null; then
              log "INFO" "使用多架构同步模式"
              if ! docker buildx imagetools create -t "$dst" "$src"; then
                log "ERROR" "多架构同步失败"
                return 1
              fi
            else
              log "INFO" "使用单架构同步模式"
              if ! docker pull -q "$src"; then
                log "ERROR" "镜像拉取失败"
                return 1
              fi
              if ! docker tag "$src" "$dst"; then
                log "ERROR" "镜像标签设置失败"
                return 1
              fi
              if ! docker push -q "$dst"; then
                log "ERROR" "镜像推送失败"
                return 1
              fi
            fi
            log "INFO" "同步完成"
          }

          # 主执行流程
          for source_ref in "${!SYNC_MAP[@]}"; do
            echo "::group::🔄 Processing ${source_ref}"
            
            # 规范化镜像地址
            log "INFO" "处理原始引用：${source_ref}"
            src_image=$(normalize_image "$source_ref" "latest")
            dst_ref="${SYNC_MAP[$source_ref]}"
            dst_image=$(normalize_image "$dst_ref" "$(cut -d: -f2 <<< "$src_image")")
            dst_image="docker.io/${DEST_REPO}/${dst_image#docker.io/}"

            # 验证源镜像
            log "INFO" "验证源镜像可访问性"
            if ! skopeo inspect --creds "$DOCKERHUB_CREDS" "docker://${src_image}" >/dev/null; then
              log "ERROR" "源镜像不可访问：${src_image}"
              exit 1
            fi

            # 检查同步必要性
            log "INFO" "计算镜像摘要"
            src_digest=$(skopeo inspect --creds "$DOCKERHUB_CREDS" --format '{{.Digest}}' "docker://${src_image}")
            if target_info=$(skopeo inspect --creds "$DOCKERHUB_CREDS" "docker://${dst_image}" 2>/dev/null); then
              dst_digest=$(jq -r '.Digest' <<< "$target_info")
              if [[ "$src_digest" == "$dst_digest" ]]; then
                log "INFO" "目标镜像已是最新版本，跳过同步"
                echo "::endgroup::"
                continue
              fi
              log "INFO" "发现差异：源摘要 ${src_digest:0:12} vs 目标摘要 ${dst_digest:0:12}"
            else
              log "WARN" "目标镜像不存在，将创建新镜像"
            fi

            # 架构对比
            log "INFO" "执行架构分析"
            src_arch=$(get_architecture "$src_image")
            if [[ -n "$target_info" ]]; then
              dst_arch=$(get_architecture "$dst_image")
            else
              dst_arch="N/A"
            fi

            # 输出架构对比
            echo -e "\n${COLOR_OK}架构对比报告：${COLOR_RESET}"
            printf "%25s → %-25s\n" "源架构" "目标架构"
            printf "%25s │ %-25s\n\n" "$src_arch" "$dst_arch"

            # 执行同步
            if sync_image "$src_image" "$dst_image"; then
              log "INFO" "同步成功完成"
            else
              log "ERROR" "同步过程中发生错误"
              exit 1
            fi

            echo "::endgroup::"
          done
