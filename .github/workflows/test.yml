name: 镜像同步工作流

on:
  workflow_dispatch:  # 手动触发
  schedule:  # 定时任务
    - cron: '0 2 * * *'  # 每日UTC 2点执行

jobs:
  docker-sync:
    runs-on: ubuntu-latest
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 规则预处理
      id: setup
      run: |
        CLEANED_RULES=$(echo "${{ vars.SYNC_MAPPINGS }}" | 
          tr ',' '\n' |
          sed -E 's/[[:space:]]+//g; /^$/d' |
          sort -u
        )
        echo "SYNC_RULES<<EOF" >> $GITHUB_ENV
        echo "$CLEANED_RULES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "=== 有效规则 ($(echo "$CLEANED_RULES" | wc -l) 条) ==="
        echo "$CLEANED_RULES"

    - name: 登录DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 配置高性能构建环境
      uses: docker/setup-buildx-action@v3
      id: buildx
      with:
        driver: docker-container
        driver-opts: |
          image=moby/buildkit:master
          network=host
        buildkitd-config-inline: |
          [registry."docker.io"]
            mirrors = ["dockerpull.cn"]
          [worker.oci]
            max-parallelism = 4

    - name: 执行智能镜像同步
      env:
        DOCKERHUB_USER: "${{ secrets.DOCKERHUB_USERNAME }}"
      run: |
        export BUILDKIT_PROGRESS=plain
        failed_rules=()
        
        while IFS= read -r rule; do
          [[ -z "$rule" ]] && continue
          echo "=== 处理规则: $rule ==="
          
          # 使用参数替换增强容错性
          src_image="${rule%%=*}"
          target_spec="${rule#*=}"
          target_spec="${target_spec/#docker.io\//}"  # 自动去除冗余registry

          # 智能补全逻辑
          if [[ "$target_spec" != *":"* ]]; then
            target_spec+=":$(awk -F':' '{print $2}' <<<"$src_image" | grep -v ^$ || echo latest)"
          fi
          [[ "$target_spec" != *"/"* ]] && target_spec="$DOCKERHUB_USER/$target_spec"

          ################ 核心修改部分 ################
          # 计算digest哈希
          timeout 60 sh -c "
            src_digest=\$(docker buildx imagetools inspect --raw \"$src_image\" 2>/dev/null | sha256sum | cut -d' ' -f1)
            target_digest=\$(docker buildx imagetools inspect --raw \"$target_spec\" 2>/dev/null | sha256sum | cut -d' ' -f1 || echo 'missing')
            
            if [ \"\$src_digest\" != \"\$target_digest\" ]; then
              echo \"🔄 发现差异 [源:\${src_digest:0:12} vs 目标:\${target_digest:0:12}]，执行同步...\"
              docker buildx imagetools create -t \"$target_spec\" \"$src_image\"
              exit \$?
            else
              echo \"✅ 内容一致，跳过同步\"
              exit 0
            fi
          " 
          sync_result=$?
          #############################################

          # 结果处理
          if (( sync_result != 0 )); then
            failed_rules+=("$rule")
            echo "❌ 同步失败: $rule (code $sync_result)"
            docker buildx imagetools inspect "$src_image" || true
          elif (( sync_result == 0 )); then
            echo "Platform详情:"
            docker buildx imagetools inspect "$target_spec" | \
              grep -E 'Platform:|Size:' | \
              grep -v 'unknown/unknown' || true
          fi
          
          echo "─────────────────────────────────────"
        done <<< "$SYNC_RULES"

        # 最终报告
        echo "=== 同步结果报告 ==="
        echo "成功: $(( $(wc -l <<<"$SYNC_RULES") - ${#failed_rules[@]} )) 条"
        if (( ${#failed_rules[@]} > 0 )); then
          echo "失败 (${#failed_rules[@]}):"
          printf '  - %s\n' "${failed_rules[@]}"
          exit 1
        fi
