name: 镜像同步工作流

on:
  workflow_dispatch:  # 手动触发
  schedule:  # 定时任务
    - cron: '0 2 * * *'  # 每日UTC 2点执行

jobs:
  docker-sync:
    runs-on: ubuntu-latest
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 规则预处理
      id: setup
      run: |
        CLEANED_RULES=$(echo "${{ vars.SYNC_MAPPINGS }}" | 
          tr ',' '\n' |
          sed -E 's/[[:space:]]+//g; /^$/d' |
          sort -u
        )
        echo "SYNC_RULES<<EOF" >> $GITHUB_ENV
        echo "$CLEANED_RULES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "=== 有效规则 ($(echo "$CLEANED_RULES" | wc -l) 条) ==="
        echo "$CLEANED_RULES"

    - name: 登录DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 配置高性能构建环境
      uses: docker/setup-buildx-action@v3
      id: buildx
      with:
        driver: docker-container
        driver-opts: |
          image=moby/buildkit:master
          network=host
        buildkitd-config-inline: |
          [registry."docker.io"]
            mirrors = ["dockerpull.cn"]
          [worker.oci]
            max-parallelism = 4

    - name: 执行智能镜像同步
      env:
        DOCKERHUB_USER: "${{ secrets.DOCKERHUB_USERNAME }}"
      run: |
        export BUILDKIT_PROGRESS=plain
        failed_rules=()
        SUCCESS_COUNT=0
        
        while IFS= read -r rule; do
          [[ -z "$rule" ]] && continue
          echo "=== 处理规则: $rule ==="
          
          src_image="${rule%%=*}"
          target_spec="${rule#*=}"
          target_spec="${target_spec/#docker.io\//}"
          if [[ "$target_spec" != *":"* ]]; then
            target_spec+=":$(awk -F':' '{print $2}' <<<"$src_image" | grep -v ^$ || echo latest)"
          fi
          [[ "$target_spec" != *"/"* ]] && target_spec="$DOCKERHUB_USER/$target_spec"

          # === 增强架构检测 ===
          echo "=== 架构检查 ==="
          echo "获取源镜像架构：$src_image"
          src_platforms=$(docker buildx imagetools inspect "$src_image" 2>/dev/null | \
            grep 'Platform:' | \
            sed -E 's/Platform: //g; s/, /\n/g' | \
            sed -e '/^unknown\/unknown$/d' -e 's/^ *//; s/ *$//' | \
            sort -u | grep -v '^$')  # 新增空行过滤
          
          # 修改条件判断
          if [ -z "$src_platforms" ]; then
            echo "❌ 获取源镜像架构失败"
            failed_rules+=("$rule")
            echo "─────────────────────────────────────"
            continue
          fi

          echo "检查目标镜像是否存在：$target_spec"
          target_platforms=$(docker buildx imagetools inspect "$target_spec" 2>/dev/null | \
            grep 'Platform:' | \
            sed -E 's/Platform: //g; s/, /\n/g' | \
            sed -e '/^unknown\/unknown$/d' -e 's/^ *//; s/ *$//' | \
            sort -u)

          # 使用wc -l准确统计平台数
          SRC_PLATFORM_COUNT=$(echo "$src_platforms" | wc -l | tr -d ' ')
          TARGET_PLATFORM_COUNT=$(echo "$target_platforms" | wc -l | tr -d ' ')

          all_platforms_present=true
          missing_platforms=()
          while read -r platform; do
            if [[ -n "$platform" ]] && ! echo "$target_platforms" | grep -qxF "$platform"; then
              all_platforms_present=false
              missing_platforms+=("$platform")
            fi
          done <<< "$src_platforms"

          if [ "$all_platforms_present" = true ] && [ "$TARGET_PLATFORM_COUNT" -ge "$SRC_PLATFORM_COUNT" ]; then
            echo "✅ 目标已包含所有架构（共 $SRC_PLATFORM_COUNT 种），跳过同步"
            SUCCESS_COUNT=$((SUCCESS_COUNT+1))
            echo "─────────────────────────────────────"
            continue
          else
            if [ "${#missing_platforms[@]}" -gt 0 ]; then
              echo "❗缺失架构：${missing_platforms[*]}"
            fi
          fi
          # === 架构检查结束 ===

          echo "🔄 同步 $src_image → $target_spec"
          timeout 300 docker buildx imagetools create -t "$target_spec" "$src_image"
          
          if (( $? != 0 )); then
            failed_rules+=("$rule")
            echo "❌ 同步失败: $rule"
            docker buildx imagetools inspect "$src_image" || true
          else
            SUCCESS_COUNT=$((SUCCESS_COUNT+1))
            echo "✅ 同步成功"
            docker buildx imagetools inspect "$target_spec" | \
              grep -E 'Platform:|Size:' | \
              sed -e '/unknown\/unknown/d'
          fi
          
          echo "─────────────────────────────────────"
        done <<< "$SYNC_RULES"

        echo "=== 同步结果报告 ==="
        echo "成功（含跳过）: $SUCCESS_COUNT 条"
        echo "失败（需处理）: ${#failed_rules[@]} 条"
        if (( ${#failed_rules[@]} > 0 )); then
          printf '失败规则列表：\n  - %s\n' "${failed_rules[@]}"
          exit 1
        fi
