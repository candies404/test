name: 镜像同步工作流

on:
  workflow_dispatch:
  schedule: 
    - cron: '0 2 * * *'

jobs:
  docker-sync:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 规则预处理
        id: setup
        run: |
          CLEANED_RULES=$(echo "${{ vars.SYNC_MAPPINGS }}" | 
            tr ',' '\n' |
            sed -E 's/[[:space:]]+//g; /^$/d' |
            sort -u
          )
          echo "SYNC_RULES<<EOF" >> $GITHUB_ENV
          echo "$CLEANED_RULES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "=== 有效镜像 ($(echo "$CLEANED_RULES" | wc -l) 条) ==="
          echo "$CLEANED_RULES"

      - name: 登录DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 配置高性能构建环境
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:master
            network=host
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["dockerpull.cn"]
            [worker.oci]
              max-parallelism = 4

      - name: 执行智能镜像同步
        env:
          DOCKERHUB_USER: "${{ secrets.DOCKERHUB_USERNAME }}"
        run: |
          export BUILDKIT_PROGRESS=plain
          failed_rules=()
          SYNC_EXECUTED=0
          SYNC_SKIPPED=0

          # 增强版架构检测函数
          analyze_platforms() {
            local image=$1
            local output ret=0
            output=$(docker buildx imagetools inspect "$image" 2>&1) || ret=$?

            # 处理镜像不存在的情况
            if [[ $ret -ne 0 ]]; then
              if [[ "$output" =~ "manifest unknown" || "$output" =~ "not found" ]]; then
                echo "NON_EXISTENT"
                return 1
              else
                echo "ERROR: $output" >&2
                return 2
              fi
            fi

            # 优化架构提取逻辑
            echo "$output" | awk '
              /^Platform:/ {
                split($0, parts, /: /)
                gsub(/, /, "\n", parts[2])
                gsub(/ /, "", parts[2])
                print parts[2]
              }' | sed '
                s/,/\n/g;
                /^unknown\/unknown$/d;
                s/^[[:space:]]*//;
                s/[[:space:]]*$//;
                /^$/d' | sort -u
          }

          # 精确计数函数
          count_platforms() {
            echo "$1" | grep -v "NON_EXISTENT" | awk 'NF {count++} END {print count+0}'
          }

          while IFS= read -r rule; do
            [[ -z "$rule" ]] && continue
            echo "=== 🛠️ 处理规则: $rule ==="

            #======= 参数解析 =======#
            src_image="${rule%%=*}"
            target_spec="${rule#*=}"
            target_spec="${target_spec/#docker.io\//}"

            # 处理源镜像标签
            if [[ "$src_image" == *":"* ]]; then
              src_tag="${src_image##*:}"
              src_name="${src_image%:*}"
            else
              src_tag="latest"
              src_name="$src_image"
            fi

            # 处理目标标签
            if [[ "$target_spec" == *":"* ]]; then
              target_tag="${target_spec##*:}"
              target_base="${target_spec%:*}"
            else
              target_base="$target_spec"
              target_tag="$src_tag"
            fi

            # 合成目标规格
            final_spec="$target_base"
            [[ "$final_spec" != */* ]] && final_spec="$DOCKERHUB_USER/$final_spec"
            final_spec+=":$target_tag"

            #======= 源镜像分析 =======#
            echo "🔍 分析源镜像架构..."
            src_platforms=$(analyze_platforms "$src_image" || true)
            if [[ "$src_platforms" == "NON_EXISTENT" ]]; then
              echo "❌ 源镜像不存在: $src_image"
              failed_rules+=("$rule")
              continue
            fi
            src_count=$(count_platforms "$src_platforms")
            echo "🔎 源镜像架构 ($src_count 种)"
            echo "$src_platforms" | sed 's/^/  ➜ /'
            (( src_count == 0 )) && { echo "❌ 无效源镜像"; failed_rules+=("$rule"); continue; }

            #======= 目标镜像分析 =======#
            echo "✳️ 最终目标镜像: $final_spec"
            target_platforms=$(analyze_platforms "$final_spec" || true)
            
            if [[ "$target_platforms" == "NON_EXISTENT" ]]; then
              echo "📦 目标镜像不存在"
              target_count=0
              target_platforms=""  # 清空传参
            else
              target_count=$(count_platforms "$target_platforms")
              echo "📦 目标镜像架构 ($target_count 种)"
              echo "$target_platforms" | sed 's/^/  ➜ /'
            fi

            #======= 同步策略 =======#
            if (( target_count == 0 )); then
              echo "🆕 初始化镜像..."
              if ! timeout 300 docker buildx imagetools create -t "$final_spec" "$src_image"; then
                echo "❌ 初始化失败"
                failed_rules+=("$rule")
                continue
              fi
              SYNC_EXECUTED=$((SYNC_EXECUTED+1))
            else
              missing_platforms=$(comm -23 <(echo "$src_platforms" | sort) <(echo "$target_platforms" | sort))
              missing_count=$(count_platforms "$missing_platforms")
              if (( missing_count > 0 )); then
                echo "🔄 差异架构 ($missing_count 种)"
                echo "$missing_platforms" | sed 's/^/  ➤ /'
                if ! timeout 300 docker buildx imagetools create -t "$final_spec" "$src_image" --append; then
                  echo "⚡ 增量同步失败，尝试覆盖模式"
                  if ! timeout 300 docker buildx imagetools create -t "$final_spec" "$src_image" --force; then
                    echo "❌ 同步彻底失败"
                    failed_rules+=("$rule")
                    continue
                  fi
                fi
                SYNC_EXECUTED=$((SYNC_EXECUTED+1))
              else
                echo "⏭️ 已保持最新"
                SYNC_SKIPPED=$((SYNC_SKIPPED+1))
              fi
            fi

            #======= 验证阶段 =======#
            echo "✅ 最终验证..."
            final_platforms=$(analyze_platforms "$final_spec" || true)
            final_count=$(count_platforms "$final_platforms")
            missing_final=$(comm -23 <(echo "$src_platforms" | sort) <(echo "$final_platforms" | sort))
            
            if (( final_count < src_count )) || [[ -n "$missing_final" ]]; then
              echo "❌ 验证失败（缺少$((src_count - final_count))种架构）"
              echo "$missing_final" | sed 's/^/  ▸ /'
              failed_rules+=("$rule")
            else
              echo "✅ 验证通过" 
              docker buildx imagetools inspect "$final_spec" | grep -E 'Platform:|Size:' | sed 's/^/  ✨ /'
            fi
            echo "─────────────────────────────────────"
          done <<< "$SYNC_RULES"

          #======= 报告生成 =======#
          total_rules=$(count_platforms "$SYNC_RULES")
          success_rules=$((SYNC_EXECUTED + SYNC_SKIPPED))
          echo "📊=== 同步报告 ==="
          echo "🔢 处理总数 | $total_rules"
          echo "🟢 成功同步 | $SYNC_EXECUTED"
          echo "🟡 跳过同步 | $SYNC_SKIPPED"
          echo "🔴 同步失败 | $((total_rules - success_rules))"
          
          if (( ${#failed_rules[@]} > 0 )); then
            echo "🔥 失败详情："
            printf "  ‼️ %s\n" "${failed_rules[@]}"
            exit 1
          fi
