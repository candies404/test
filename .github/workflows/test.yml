name: Docker Image Sync

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

jobs:
  docker-sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup sync rules
      id: setup
      run: |
        # 从环境变量读取映射规则
        RAW_MAPPINGS="${{ vars.SYNC_MAPPINGS }}"
        
        # 转换为数组并去重
        IFS=',' read -ra RULES <<< "${RAW_MAPPINGS//, /,}"
        UNIQUE_RULES=$(printf "%s\n" "${RULES[@]}" | sort -u)
        
        # 生成处理用变量
        echo "SYNC_RULES<<EOF" >> $GITHUB_ENV
        echo "$UNIQUE_RULES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Login Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Process images
      run: |
        IFS=$'\n'
        for rule in $SYNC_RULES; do
          [[ -z "$rule" ]] && continue

          # 分离源和目标部分
          src_image=$(cut -d= -f1 <<< "$rule")
          target_part=$(cut -d= -f2 <<< "$rule")

          echo "🗃️ 处理规则：$src_image → $target_part"

          # 拆分目标组件
          if [[ "$target_part" == *":"* ]]; then
            target_tag=${target_part##*:}
            target_repo=${target_part%:*}
          else
            target_tag="latest"
            target_repo=$target_part
          fi

          if [[ "$target_repo" == *"/"* ]]; then
            target_user=${target_repo%%/*}
            target_image_name=${target_repo#*/}
          else
            target_user="${{ secrets.DOCKERHUB_USERNAME }}"
            target_image_name=$target_repo
          fi

          target_image="${target_user}/${target_image_name}:${target_tag}"

          # 执行同步流程
          echo "🔎 源镜像：$src_image"
          echo "🎯 目标镜像：$target_image"
          
          docker pull -q "$src_image"
          src_id=$(docker inspect --format '{{.Id}}' "$src_image")

          if docker pull -q "$target_image" 2>/dev/null; then
            target_id=$(docker inspect --format '{{.Id}}' "$target_image")
          else
            target_id="not_exist"
          fi

          if [[ "$src_id" != "$target_id" ]]; then
            echo "🚀 发现更新，正在同步..."
            docker tag "$src_image" "$target_image"
            docker push "$target_image"
          else
            echo "✅ 已经是最新版本"
          fi

          echo "---------------------------------------"
        done
