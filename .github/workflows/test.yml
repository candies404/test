name: 镜像同步工作流

on:
  workflow_dispatch:
  schedule: 
    - cron: '0 2 * * *'

jobs:
  docker-sync:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 规则预处理
        id: setup
        run: |
          CLEANED_RULES=$(echo "${{ vars.SYNC_MAPPINGS }}" | 
            tr ',' '\n' |
            sed -E 's/[[:space:]]+//g; /^$/d' |
            sort -u
          )
          echo "SYNC_RULES<<EOF" >> $GITHUB_ENV
          echo "$CLEANED_RULES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "=== 有效规则 ($(echo "$CLEANED_RULES" | wc -l) 条) ==="
          echo "$CLEANED_RULES"

      - name: 安装依赖工具
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq

      - name: 登录DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 配置高性能构建环境
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:master
            network=host
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["dockerpull.cn"]
            [worker.oci]
              max-parallelism = 4

      - name: 执行智能镜像同步
        env:
          DOCKERHUB_USER: "${{ secrets.DOCKERHUB_USERNAME }}"
        run: |
          export BUILDKIT_PROGRESS=plain
          failed_rules=()
          SYNC_EXECUTED=0
          SYNC_SKIPPED=0

          # 增强版架构解析函数
          get_platforms() {
            local raw_data="$1"
            [[ -z "$raw_data" ]] && return

            # 处理多架构镜像
            if echo "$raw_data" | jq -e '.manifests' >/dev/null; then
              echo "$raw_data" | jq -r '
                .manifests[] | 
                .platform as $p |
                select(
                  ($p.os != null) and 
                  ($p.architecture != null) and 
                  ($p.os != "unknown") and 
                  ($p.architecture != "unknown")
                ) |
                "\($p.os)/\($p.architecture)" +
                (if $p.variant and $p.variant != "" then "/\($p.variant)" else "" end)
              ' | sort -u
            else
              # 处理单架构镜像的多格式兼容
              if echo "$raw_data" | jq -e '.architecture' >/dev/null; then
                os=$(echo "$raw_data" | jq -r '.os // "linux"')
                arch=$(echo "$raw_data" | jq -r '.architecture')
                variant=$(echo "$raw_data" | jq -r '.variant // ""')
                
                # ARM架构变体自动修正
                [[ "$arch" == "arm" && "$variant" =~ ^v[0-9]+$ ]] && variant="${variant#v}"
                [[ "$arch" == "amd64" ]] && variant=""
                
                echo "${os}/${arch}${variant:+/$variant}"
              else
                # 兼容Docker v2 manifest格式
                echo "$raw_data" | jq -r '
                  if .mediaType? == "application/vnd.docker.distribution.manifest.v2+json" then
                    "linux/\(.architecture // "unknown")"
                  else
                    empty
                  end
                ' | grep -v "unknown"
              fi
            fi | grep -vE 'unknown|^$' | sort -u
          }

          check_image_exists() {
            skopeo inspect "docker://$1" >/dev/null 2>&1
          }

          while IFS= read -r rule; do
            [[ -z "$rule" ]] && continue
            echo "=== 🛠️ 处理规则: $rule ==="

            #======= 参数解析 =======#
            src_image="${rule%%=*}"
            target_spec="${rule#*=}"
            target_spec="${target_spec/#docker.io\//}"

            # 处理源镜像标签
            if [[ "$src_image" == *":"* ]]; then
              src_tag="${src_image##*:}"
              src_name="${src_image%:*}"
            else
              src_tag="latest"
              src_name="$src_image"
            fi

            # 目标spec处理
            if [[ "$target_spec" == *":"* ]]; then
              target_tag="${target_spec##*:}"
              target_base="${target_spec%:*}"
            else
              target_base="$target_spec"
              target_tag="$src_tag"
            fi

            # 自动补全用户前缀
            final_spec="$target_base"
            [[ ! "$final_spec" == *"/"* ]] && final_spec="$DOCKERHUB_USER/$final_spec"
            final_spec+=":$target_tag"

            #======= 架构分析 =======#
            echo "🔍 校验源镜像 $src_image ..."
            raw_src_data=$(skopeo inspect --raw "docker://$src_image" 2>&1 || true)
            src_platforms=$(get_platforms "$raw_src_data")
            if [[ -z "$src_platforms" ]]; then
              echo "❌ 无法获取源镜像架构信息:"
              grep -i 'error' <<< "$raw_src_data" | head -n3
              failed_rules+=("$rule")
              continue
            fi

            echo "🔎 源镜像支持架构 ($(echo "$src_platforms" | wc -w) 种)"
            echo "$src_platforms" | sed 's/^/  ➤ /'

            #======= 目标镜像分析 =======#
            echo "✳️ 校验目标镜像 $final_spec ..."
            if check_image_exists "$final_spec"; then
              raw_target_data=$(skopeo inspect --raw "docker://$final_spec" 2>&1 || true)
              target_platforms=$(get_platforms "$raw_target_data")
              [[ -z "$target_platforms" ]] && echo "⚠️ 目标镜像存在但无法解析架构"
            else
              echo "🔍 目标镜像不存在，将进行初始化"
              target_platforms=""
            fi

            echo "📦 当前目标镜像架构 ($(echo "$target_platforms" | wc -w || echo 0) 种)"
            [[ -n "$target_platforms" ]] && echo "$target_platforms" | sed 's/^/  ➤ /'

            #======= 同步策略 =======#
            if [[ -z "$target_platforms" ]]; then
              echo "🆕 初始化目标镜像..."
              timeout 300 docker buildx imagetools create -t "$final_spec" "$src_image" || {
                echo "❌ 初始化失败"; 
                failed_rules+=("$rule");
                continue
              }
              SYNC_EXECUTED=$((SYNC_EXECUTED+1))
            else
              missing_platforms=$(comm -23 <(echo "$src_platforms" | sort) <(echo "$target_platforms" | sort))
              if [[ -n "$missing_platforms" ]]; then
                echo "🔄 缺失架构 ($(wc -l <<< "$missing_platforms") 种)" 
                echo "$missing_platforms" | sed 's/^/  ➤ /'
                timeout 300 docker buildx imagetools create -t "$final_spec" "$src_image" --append || {
                  echo "⚡ 增量同步失败，尝试强制覆盖..."
                  timeout 300 docker buildx imagetools create -t "$final_spec" "$src_image" --force
                }
                SYNC_EXECUTED=$((SYNC_EXECUTED+1))
              else
                echo "⏭️ 已包含全部架构，无需同步"
                SYNC_SKIPPED=$((SYNC_SKIPPED+1))
              fi
            fi

            #======= 结果验证 =======#
            raw_final_data=$(skopeo inspect --raw "docker://$final_spec" 2>&1 || true)
            final_platforms=$(get_platforms "$raw_final_data")
            missing_check=$(comm -23 <(echo "$src_platforms" | sort) <(echo "$final_platforms" | sort))

            echo "✅ 最终校验结果："
            if [[ -n "$missing_check" ]]; then
              echo "❌ 缺失架构 ($(wc -l <<< "$missing_check") 种)"
              echo "$missing_check" | sed 's/^/  ▸ /'
              failed_rules+=("$rule")
            else
              echo "✔️ 所有架构已同步完成"
              skopeo inspect "docker://$final_spec" | jq '
                {
                  OS: .Os,
                  Architecture: .Architecture,
                  Variant: (if .Variant == "" then null else .Variant end),
                  Created: .Created
                }' | awk ' 
                  /:/ { 
                    key=$1; gsub(/"/, "", key); 
                    value=$0; sub(/^[^:]+: /, "", value); 
                    printf "  🏷️  %-12s %s\n", key, value 
                  }'
            fi

            echo "─────────────────────────────────────"
          done <<< "$SYNC_RULES"

          #======= 生成报告 =======#
          total_rules=$(echo "$SYNC_RULES" | wc -l | tr -d ' ')
          echo "📊=== 执行报告 ==="
          echo "🔢 规则总数 | $total_rules"
          echo "🟩 成功同步 | $SYNC_EXECUTED"
          echo "🟨 跳过同步 | $SYNC_SKIPPED"
          echo "🟥 失败规则 | ${#failed_rules[@]}"
          if ((${#failed_rules[@]} > 0)); then
            echo "🔥 失败规则列表："
            printf "  ‼️ %s\n" "${failed_rules[@]}"
            exit 1
          fi
