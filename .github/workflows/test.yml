name: Docker Image Sync

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

jobs:
  docker-sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup sync rules
      id: setup
      run: |
        # 清洗规则（增强空格处理）
        CLEANED_RULES=$(echo "${{ vars.SYNC_MAPPINGS }}" |
          tr '\n' ',' | 
          sed -E 's/[[:space:]]+//g; s/,+/ /g; s/^ | $//g' |
          tr ' ' '\n' |
          grep -v '^$'
        )
        
        echo "SYNC_RULES<<EOF" >> $GITHUB_ENV
        echo "$CLEANED_RULES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

        # 调试输出清洗后的规则
        echo "=== 处理后规则 ==="
        echo "$CLEANED_RULES"

    - name: Login Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Process images
      env:
        DOCKERHUB_USER: "${{ secrets.DOCKERHUB_USERNAME }}"
      run: |
        IFS=$'\n'
        for rule in $SYNC_RULES; do
          [[ -z "$rule" ]] && continue
          echo "=== 处理规则: $rule ==="

          # 分割规则（支持SHA256格式）
          if ! IFS="=" read -r src_image target_part <<< "${rule// /}"; then
            echo "⚠️ 规则格式错误，跳过"
            continue
          fi

          # 添加默认镜像源
          if [[ ! "$src_image" == *"/"* ]] && [[ ! "$src_image" == *":"* ]]; then
            src_image="docker.io/library/$src_image:latest"
          fi

          # 解析目标部分
          if [[ "$target_part" == *":"* ]]; then
            target_tag="${target_part##*:}"
            repo_part="${target_part%:*}"
          else
            target_tag="latest"
            repo_part="$target_part"
          fi

          # 处理用户命名空间
          if [[ "$repo_part" == *"/"* ]]; then
            target_user="${repo_part%%/*}"
            target_image="${repo_part#*/}"
            # 验证用户名格式
            if [[ ! "$target_user" =~ ^[a-z0-9]+([._-][a-z0-9]+)*$ ]]; then
              echo "❌ 非法的用户名格式: $target_user"
              continue
            fi
          else
            target_user="$DOCKERHUB_USER"
            target_image="$repo_part"
          fi

          final_target="${target_user}/${target_image}:${target_tag}"
          echo "使用的Docker用户: $DOCKERHUB_USER"
          echo "生成的目标镜像: $final_target"


          # 检查源镜像是否存在
          if ! docker buildx imagetools inspect "$src_image" >/dev/null 2>&1; then
            echo "❌ 无法访问源镜像 $src_image"
            continue
          fi

          # 提取有效平台列表并过滤unknown
          platforms=$(docker buildx imagetools inspect "$src_image" --format "{{ range .Manifests }}{{ if ne .Platform.os \"unknown\" }}{{ .Platform.os }}/{{ .Platform.architecture }}{{ if .Platform.variant }}/{{ .Platform.variant }}{{ fi }} {{ end }}{{ end }}")
          echo "📌 有效平台: $platforms"

          # Create manifest using explicit platforms
          echo "🚀 开始镜像同步..."
          echo "🔄 同步中: $src_image → $final_target"
          if docker buildx imagetools create \
            --tag "$final_target" \
            $(echo "$src_image" | sed 's/\(.*\)/[ \1 ]/' | sed "s/ / --append /g") \
            > sync.log 2>&1; then
            
            echo "✅ 同步成功"
            echo "镜像详情："
            docker buildx imagetools inspect "$final_target"
          else
            echo "❌ 同步失败，错误日志："
            cat sync.log
          fi

          echo "---------------------------------------"    
        done
