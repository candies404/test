name: Docker Image Sync

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

jobs:
  docker-sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup sync rules
      id: setup
      run: |
        # 清洗规则，去除空格和空行
        CLEANED_RULES=$(echo "${{ vars.SYNC_MAPPINGS }}" |
          tr '\n' ',' |                  # 将换行替换为逗号
          sed -E 's/,+/ /g; s/^ +| +$//g' |  # 多个逗号转为空格，并去除首尾空格
          tr ' ' '\n' |                  # 空格转为换行
          grep -v '^$'                   # 删除空行
        )
        # 导出处理后的规则到环境变量
        echo "SYNC_RULES<<EOF" >> $GITHUB_ENV
        echo "$CLEANED_RULES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Login Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Process images
      env:
        DOCKERHUB_USER: "${{ secrets.DOCKERHUB_USERNAME }}"  # 从机密变量获取用户名
      run: |
        IFS=$'\n'
        for rule in $SYNC_RULES; do
          [[ -z "$rule" ]] && continue

          echo "=== 处理规则: $rule ==="

          # 分割源镜像和目标部分
          if ! IFS="=" read -r src_image target_part <<< "$rule"; then
            echo "⚠️ 规则格式错误，跳过"
            continue
          fi

          # 解析目标标签
          target_tag="latest"
          if [[ "$target_part" == *":"* ]]; then
            target_tag="${target_part##*:}"
            repo_part="${target_part%:*}"
          else
            repo_part="$target_part"
          fi

          # 处理命名空间
          if [[ "$repo_part" != *"/"* ]]; then
            # 使用机密变量中的用户名作为默认命名空间
            target_user="$DOCKERHUB_USER"
            target_image="$repo_part"
          else
            # 分割用户和镜像名
            target_user="${repo_part%%/*}"
            target_image="${repo_part#*/}"
            # 验证用户名是否合法
            if ! [[ "$target_user" =~ ^[a-z0-9]+([._-][a-z0-9]+)*$ ]]; then
              echo "❌ 非法用户名: $target_user"
              continue
            fi
          fi

          final_target="${target_user}/${target_image}:${target_tag}"

          # 验证目标镜像格式
          if ! [[ "$final_target" =~ ^[a-z0-9]+([._-][a-z0-9]+)*/[a-z0-9]+([._-][a-z0-9]+)*(:[a-zA-Z0-9_.-]+)?$ ]]; then
            echo "❌ 非法的镜像格式: $final_target"
            continue
          fi

          echo "🔄 同步中: $src_image → $final_target"

          # 拉取源镜像
          if ! docker pull -q "$src_image"; then
            echo "❌ 无法拉取源镜像"
            continue
          fi

          # 拉取目标镜像以检查是否存在
          if docker pull -q "$final_target" 2>/dev/null; then
            target_exists=true
          else
            target_exists=false
          fi

          # 获取镜像ID进行比较
          src_id=$(docker inspect -f '{{.Id}}' "$src_image")
          if $target_exists; then
            target_id=$(docker inspect -f '{{.Id}}' "$final_target")
          else
            target_id=""
          fi

          # 判断是否需要同步
          if [[ "$src_id" != "$target_id" ]]; then
            echo "🚀 检测到变更，开始同步..."
            docker tag "$src_image" "$final_target"
            if docker push -q "$final_target" 2>/dev/null; then
              echo "✅ 同步成功"
            else
              echo "❌ 推送失败"
            fi
          else
            echo "✅ 镜像已是最新，无需操作"
          fi

          echo "---------------------------------------"
        done
