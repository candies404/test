name: 镜像同步工作流

on:
  workflow_dispatch:
  schedule: 
    - cron: '0 2 * * *'

jobs:
  docker-sync:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 规则预处理
        id: setup
        run: |
          CLEANED_RULES=$(echo "${{ vars.SYNC_MAPPINGS }}" | 
            tr ',' '\n' |
            sed -E 's/[[:space:]]+//g; /^$/d' |
            sort -u
          )
          echo "SYNC_RULES<<EOF" >> $GITHUB_ENV
          echo "$CLEANED_RULES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "=== 有效规则 ($(echo "$CLEANED_RULES" | wc -l) 条) ==="
          echo "$CLEANED_RULES"

      - name: 安装依赖工具
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq

      - name: 登录DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 配置高性能构建环境
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:master
            network=host
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["dockerpull.cn"]
            [worker.oci]
              max-parallelism = 4

      - name: 执行智能镜像同步
        env:
          DOCKERHUB_USER: "${{ secrets.DOCKERHUB_USERNAME }}"
        run: |
          export BUILDKIT_PROGRESS=plain
          failed_rules=()
          SYNC_EXECUTED=0
          SYNC_SKIPPED=0

          # 增强版架构解析函数
          get_platforms() {
            local image_ref=$1
            local raw_data=$(skopeo inspect --raw "docker://$image_ref" 2>&1 || true)
            local inspect_data=$(skopeo inspect "docker://$image_ref" 2>/dev/null || echo '{}')
            
            echo "解析架构信息 [原始数据长度: ${#raw_data}]" >&2

            # 多架构检测逻辑
            if echo "$raw_data" | jq -e '.manifests and (.mediaType // "" | contains("manifest.list"))' >/dev/null; then
              echo "$raw_data" | jq -r '
                .manifests[] | 
                .platform as $p |
                select(
                  ($p.os != null) and 
                  ($p.architecture != null) and 
                  ($p.os != "unknown") and 
                  ($p.architecture != "unknown")
                ) |
                "\($p.os)/\($p.architecture)" +
                (if $p.variant and $p.variant != "" then "/\($p.variant)" else "" end)
              ' | sort -u | tee /dev/stderr
              return
            fi

            # 单架构处理逻辑
            os=$(echo "$inspect_data" | jq -r '.Os // "linux"')
            arch=$(echo "$inspect_data" | jq -r '.Architecture // "unknown"')
            variant=$(echo "$inspect_data" | jq -r '.Variant? // ""')
            
            # 原始数据回退解析
            if [[ "$arch" == "unknown" ]] && [[ -n "$raw_data" ]]; then
              os=$(echo "$raw_data" | jq -r '.os // "linux"')
              arch=$(echo "$raw_data" | jq -r '.architecture // empty')
              variant=$(echo "$raw_data" | jq -r '.variant? // empty')
            fi

            # ARM架构变体修正 (兼容不同标签格式)
            if [[ "$arch" == "arm" && "$variant" =~ ^v?[0-9]+$ ]]; then
              variant="${variant//v/}"
            fi

            # 架构有效性验证
            if [[ "$arch" == "unknown" ]] || [[ -z "$arch" ]]; then
              echo "[警告] 无法识别架构：$image_ref" >&2
              return
            fi

            # 格式化输出架构信息
            platform_str="${os}/${arch}"
            [[ -n "$variant" ]] && platform_str+="/${variant}"
            echo "$platform_str" | grep -vE 'unknown|^$' | sort -u
          }

          check_image_exists() {
            timeout 10 skopeo inspect "docker://$1" >/dev/null 2>&1
          }

          while IFS= read -r rule; do
            [[ -z "$rule" ]] && continue
            echo "=== 🛠️ 处理规则: $rule ==="

            # 参数解析逻辑保持不变...

            #======= 增强版架构分析 =======#
            echo "🔍 校验源镜像架构..."
            src_platforms=$(get_platforms "$src_image")
            if [[ -z "$src_platforms" ]]; then
              echo "❌ 源镜像架构解析失败" 
              failed_rules+=("$rule")
              continue
            fi

            echo "🔎 源架构支持 ($(wc -w <<< "$src_platforms") 种):"
            echo "$src_platforms" | sed 's/^/  ▸ /'

            #======= 目标镜像存在性检查 =======#
            echo "✳️ 分析目标镜像 $final_spec ..."
            target_platforms=""
            if check_image_exists "$final_spec"; then
              echo "检测到目标镜像存在，开始解析架构..."
              target_platforms=$(get_platforms "$final_spec")
              
              if [[ -z "$target_platforms" ]]; then
                echo "⚠️ 目标镜像存在但架构解析失败，可能不是多架构镜像" 
                # 尝试二次验证：强制推单个架构
                timeout 30 skopeo copy --format v2s2 "docker://$src_image" "docker://$final_spec" && {
                  echo "🔄 强制推送单架构镜像成功"
                  SYNC_EXECUTED=$((SYNC_EXECUTED+1))
                  continue
                } || {
                  echo "❌ 强制推送失败" 
                  failed_rules+=("$rule")
                  continue
                }
              fi
            else
              echo "🆕 目标镜像不存在，需要初始化"
            fi

            # 原有同步策略逻辑保持不变...

            #======= 智能结果验证 =======#
            if [[ -n "$target_platforms" ]]; then
              final_platforms=$(get_platforms "$final_spec")
              missing_check=$(comm -23 <(echo "$src_platforms" | sort) <(echo "$final_platforms" | sort))
              
              if [[ -n "$missing_check" ]]; then
                echo "❌ 同步后仍有缺失架构:"
                echo "$missing_check" | sed 's/^/  ▸ /'
                failed_rules+=("$rule")
              else
                echo "✅ 架构一致性验证通过" 
              fi
            else
              echo "⚠️ 跳过最终验证（无有效架构信息）"
            fi
          done <<< "$SYNC_RULES"
          #======= 生成报告 =======#
          total_rules=$(echo "$SYNC_RULES" | wc -l | tr -d ' ')
          echo "📊=== 执行报告 ==="
          echo "🔢 规则总数 | $total_rules"
          echo "🟩 成功同步 | $SYNC_EXECUTED"
          echo "🟨 跳过同步 | $SYNC_SKIPPED"
          echo "🟥 失败规则 | ${#failed_rules[@]}"
          if ((${#failed_rules[@]} > 0)); then
            echo "🔥 失败规则列表："
            printf "  ‼️ %s\n" "${failed_rules[@]}"
            exit 1
          fi
