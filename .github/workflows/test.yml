name: Docker Image Sync

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

jobs:
  docker-sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup sync rules
      id: setup
      run: |
        # 清洗规则强化版
        CLEANED_RULES=$(echo "${{ vars.SYNC_MAPPINGS }}" |
          tr '\n' ',' |          # 换行转逗号
          sed -E 's/,+/ /g; s/^ +| +$//g' |  # 逗号变空格，去除首尾空格
          tr ' ' '\n' |          # 转多行格式
          grep -v '^$'           # 删除空行
        )
        
        echo "SYNC_RULES<<EOF" >> $GITHUB_ENV
        echo "$CLEANED_RULES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Login Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Process images
      env:
        DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}  # 关键修复点！！！！
      run: |
        IFS=$'\n'
        for rule in $SYNC_RULES; do
          [[ -z "$rule" ]] && continue

          echo "=== 当前规则：$rule ==="

          # 安全分割规则
          if ! IFS="=" read -r src_image target_part <<< "$rule"; then
            echo "⚠️ 规则格式错误，跳过"
            continue
          fi

          # 解码目标结构
          target_tag="latest"
          if [[ "$target_part" == *":"* ]]; then
            target_tag="${target_part##*:}"
            repo_part="${target_part%:*}"
          else
            repo_part="$target_part"
          fi

          # 命名空间处理强化逻辑
          if [[ "$repo_part" == *"/"* ]]; then
            target_user="${repo_part%%/*}"
            target_image="${repo_part#*/}"
          else
            target_user="$DOCKERHUB_USER"  # 使用环境变量！！！
            target_image="$repo_part"
          fi

          final_target="${target_user}/${target_image}:${target_tag}"

          # 镜像格式终检
          if ! [[ "$final_target" =~ ^[a-z0-9]+([._-][a-z0-9]+)*/[a-z0-9]+([._-][a-z0-9]+)*(:[a-zA-Z0-9_.-]+)?$ ]]; then
            echo "❌ 不合法的镜像格式："$final_target""
            continue
          fi

          echo "🔄 同步 [ $src_image ] → [ $final_target ]"

          # 执行同步流程
          if ! docker pull -q "$src_image"; then
            echo "❌ 源镜像拉取失败"
            continue
          fi

          if docker pull -q "$final_target" 2>/dev/null; then
            need_push=false
          else
            need_push=true
          fi

          # 更新检查（优化ID比较）
          if $need_push || [[ $(docker inspect -f '{{.Id}}' "$src_image" 2>/dev/null) != $(docker inspect -f '{{.Id}}' "$final_target" 2>/dev/null) ]]; then
            docker tag "$src_image" "$final_target" &&
            docker push "$final_target" &&
            echo "✅ 同步成功" || echo "❌ 推送失败"
          else
            echo "✅ 已是最新无需同步"
          fi

          echo "---------------------------------------"
        done
