name: one-hub 前端修改

on:
  #  schedule:
  #    - cron: '0 0 * * *'  # 每天 UTC 0:00 运行（北京时间 8:00）
  workflow_dispatch:        # 支持手动触发

jobs:
  one-hub-custom:
    name: '自定义前端 One Hub'
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      TZ: Asia/Shanghai
    permissions:
      issues: write
    steps:
      - name: 检查更新
        id: check
        run: |
          # 获取最新commit的信息
          COMMIT_INFO=$(curl -s "https://api.github.com/repos/MartialBE/one-hub/commits/main")
          CURRENT_SHA=$(echo $COMMIT_INFO | jq -r '.sha' | cut -c1-7)
          COMMIT_TIME=$(echo $COMMIT_INFO | jq -r '.commit.committer.date')
          
          # 计算时间差，确保使用UTC时间
          NOW=$(date -u +%s)
          COMMIT_TIME_SEC=$(date -u -d "$COMMIT_TIME" +%s)
          DIFF=$((NOW - COMMIT_TIME_SEC))
          
          # 获取issue中的sha，使用 -s 静默模式
          ISSUES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues?labels=one-hub-sha")
          
          if [ "$(echo $ISSUES | jq '. | length')" -eq "0" ]; then
            echo "没有找到记录SHA的issue，创建新issue"
            
            if [ $DIFF -le 86400 ]; then
              echo "24小时内有更新"
              # 创建新issue，将输出重定向到临时文件
              RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -d "{\"title\":\"One Hub SHA Record\",\"body\":\"$CURRENT_SHA\",\"labels\":[\"one-hub-sha\"]}" \
                "https://api.github.com/repos/${{ github.repository }}/issues")
              # 只输出issue number用于记录
              echo "Created issue number: $(echo $RESPONSE | jq .number)"
              echo "has_update=true" >> $GITHUB_OUTPUT
            else
              echo "24小时内没有更新"
              # 创建issue但不显示详细响应
              curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -d "{\"title\":\"One Hub SHA Record\",\"body\":\"$CURRENT_SHA\",\"labels\":[\"one-hub-sha\"]}" \
                "https://api.github.com/repos/${{ github.repository }}/issues" > /dev/null
              echo "has_update=false" >> $GITHUB_OUTPUT
            fi
            
          else
            # 获取issue中记录的sha
            ISSUE_NUMBER=$(echo $ISSUES | jq -r '.[0].number')
            RECORDED_SHA=$(echo $ISSUES | jq -r '.[0].body')
            
            echo "当前 SHA: $CURRENT_SHA"
            echo "记录的 SHA: $RECORDED_SHA"
            
            if [ "$CURRENT_SHA" != "$RECORDED_SHA" ]; then
              echo "检测到更新"
              
              # 更新issue中的sha
              curl -s -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -d "{\"body\":\"$CURRENT_SHA\"}" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER" > /dev/null
                
              echo "has_update=true" >> $GITHUB_OUTPUT
            else
              echo "没有检测到更新"
              echo "has_update=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # 输出时间信息供调试
          COMMIT_DATE=$(date -u -d "@$COMMIT_TIME_SEC" '+%Y-%m-%d %H:%M:%S UTC')
          CURRENT_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          COMMIT_DATE_LOCAL=$(date -d "@$COMMIT_TIME_SEC" '+%Y-%m-%d %H:%M:%S %Z')
          CURRENT_DATE_LOCAL=$(date '+%Y-%m-%d %H:%M:%S %Z')
          HOURS=$((DIFF / 3600))
          echo "最新提交时间(UTC): $COMMIT_DATE"
          echo "当前时间(UTC): $CURRENT_DATE"
          echo "最新提交时间(本地): $COMMIT_DATE_LOCAL"
          echo "当前时间(本地): $CURRENT_DATE_LOCAL"
          echo "相差: ${HOURS} 小时"

      - name: 发送通知
        if: steps.check.outputs.has_update == 'false'
        uses: candies404/Multi-Channel-Notifier@latest
        with:
          title: "One Hub 构建通知"
          content: "24小时内没有检测到更新"
          # 是否启用一言
          hitokoto: 'false'
          wpush_key : ${{ secrets.WPUSH_KEY }}

      - name: one-hub 仓库未更新 执行退出
        if: steps.check.outputs.has_update == 'false'
        run: exit 1

      - name: 检查 one-hub 仓库 TableRow.jsx 是否更新
        id: check_file
        run: |
          # 获取文件最后更新时间
          FILE_LAST_COMMIT=$(curl -s "https://api.github.com/repos/MartialBE/one-hub/commits?path=web/src/views/Channel/component/TableRow.jsx" | jq -r '.[0].commit.committer.date')
          FILE_COMMIT_TIME=$(date -d "$FILE_LAST_COMMIT" +%s)
          NOW=$(date +%s)
          DIFF=$((NOW - FILE_COMMIT_TIME))
          
          FILE_COMMIT_DATE=$(date -d "@$FILE_COMMIT_TIME" '+%Y-%m-%d %H:%M:%S')
          echo "文件最后更新时间: $FILE_COMMIT_DATE"
          
          if [ $DIFF -le 86400 ]; then
            echo "文件在24小时内有更新"
            echo "file_updated=true" >> $GITHUB_OUTPUT
          else
            echo "文件在24小时内没有更新"
            echo "file_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: 发送 TableRow.jsx 未更新通知
        if: steps.check_file.outputs.file_updated == 'true'
        uses: candies404/Multi-Channel-Notifier@latest
        with:
          title: "One-Hub TableRow.jsx 更新"
          content: "请及时上传更新后的 TableRow.jsx 文件"
          hitokoto: 'false'
          wpush_key : ${{ secrets.WPUSH_KEY }}

      # - name: 如果文件没有更新则退出
      #   if: steps.check_file.outputs.file_updated == 'false'
      #   run: exit 1

      - name: 检出 MartialBE/one-hub 目标仓库
        uses: actions/checkout@v4
        with:
          repository: MartialBE/one-hub
          path: ""  # 在根目录

      - name: 检出源仓库
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: source-repo  # 检出源仓库到 source-repo 目录

      - name: 保存版本信息
        run: |
          HASH=$(git rev-parse --short=7 HEAD)
          echo "dev-$HASH" > VERSION
          cat VERSION

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.4.1

      - name: 缓存 Node 模块
        uses: actions/cache@v4
        with:
          path: |
            web/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-node-${{ hashFiles('web/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 构建前端，删除了官网按钮
        env:
          CI: ""
        run: |
          ls -la  # 查看当前目录
          ls -la source-repo/  # 查看源仓库目录内容
          export VERSION=$(cat VERSION)
          cp source-repo/one-hub/TableRow.jsx web/src/views/Channel/component/TableRow.jsx
          cd web
          yarn install
          VITE_APP_VERSION=$VERSION yarn run build

      - name: 设置 Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=1.18.0"

      # - name: 缓存 Go 模块
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ~/go/pkg/mod
      #       ~/.cache/go-build
      #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      #     restore-keys: |
      #       ${{ runner.os }}-go-

      - name: 编译后端 (amd64)
        run: |
          go mod download
          go build -ldflags "-s -w -X 'one-api/common/config.Version=$(cat VERSION)' -extldflags '-static'" -o one-api-amd64

      - name: 编译后端 (arm64)
        run: |
          sudo rm /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu
          CC=aarch64-linux-gnu-gcc CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -ldflags "-s -w -X 'one-api/common/config.Version=$(cat VERSION)' -extldflags '-static'" -o one-api-arm64

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker 元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/one-hub
          tags: |
            type=raw,value=latest

      - name: 构建并推送镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile-action
