name: one-hub 前端修改

on:
  workflow_dispatch:

jobs:
  check-updates:
    name: 更新检查
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.final_check.outputs.should_build }}
      table_updated: ${{ steps.check_table.outputs.table_file_updated }}
    continue-on-error: true
    permissions:
      issues: write
    env:
      TZ: Asia/Shanghai
  steps:
    - name: 检查主仓库更新
      id: check_main
      run: |
        echo "=== 开始检查 one-hub 仓库更新 ==="
        MAIN_SHA=$(curl -s "https://api.github.com/repos/MartialBE/one-hub/commits/main" | jq -r '.sha' | cut -c1-7)
        echo "主仓库最新 SHA: $MAIN_SHA"
  
        TABLE_SHA=$(curl -s "https://api.github.com/repos/MartialBE/one-hub/commits?path=web/src/views/Channel/component/TableRow.jsx" | jq -r 'if length > 0 then .[0].sha else empty end' | cut -c1-7)
        echo "TableRow.jsx 最新 SHA: $TABLE_SHA"
  
        echo "=== 检查 Issue 状态 ==="
        ISSUE_INFO=$(curl -s "https://api.github.com/repos/${{ github.repository }}/issues?state=open&per_page=100" | jq -r '[.[] | select(.title == "one-hub")]')
        echo "当前 Issue 信息: $ISSUE_INFO"
  
        if [ "$(echo "$ISSUE_INFO" | jq 'length')" -eq 0 ]; then
          echo "=== 创建新 Issue ==="
          BODY="one-hub-update:$MAIN_SHA"$'\n'"TableRow.jsx-sha:$TABLE_SHA"
          echo "Issue 内容: $BODY"
  
          JSON_DATA=$(jq -n --arg title "one-hub" --arg body "$BODY" '{title: $title, body: $body}')
          echo "发送的 JSON 数据: $JSON_DATA"
  
          RESPONSE=$(curl -sS -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "$JSON_DATA" "https://api.github.com/repos/${{ github.repository }}/issues")
          echo "Issue 创建响应: $RESPONSE"
  
          echo "main_updated=true" >> $GITHUB_OUTPUT
        else
          echo "=== 更新现有 Issue ==="
          ISSUE_ID=$(echo "$ISSUE_INFO" | jq -r '.[0].number')
          ISSUE_BODY=$(echo "$ISSUE_INFO" | jq -r '.[0].body')
          echo "当前 Issue ID: $ISSUE_ID"
          echo "当前 Issue 内容: $ISSUE_BODY"
  
          NEW_BODY=$(echo "$ISSUE_BODY" | sed "s/^one-hub-update:.*/one-hub-update:$MAIN_SHA/")
          echo "更新后的 Issue 内容: $NEW_BODY"
  
          if [ "$ISSUE_BODY" != "$NEW_BODY" ]; then
            echo "=== 检测到主仓库更新 ==="
            JSON_DATA=$(jq -n --arg body "$NEW_BODY" '{body: $body}')
            echo "发送的 JSON 数据: $JSON_DATA"
  
            curl_response=$(curl -sS -w "\n%{http_code}" -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d "$JSON_DATA" "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_ID")
            http_code=$(echo "$curl_response" | tail -n1)
            body=$(echo "$curl_response" | sed '$d')
  
            echo "HTTP 状态码: $http_code"
            echo "响应内容: $body"
  
            if [ "$http_code" -ne 200 ]; then
              echo "::error::更新 Issue 失败"
              exit 1
            else
              echo "Issue 更新成功"
            fi
  
            echo "main_updated=true" >> $GITHUB_OUTPUT
          else
            echo "=== 主仓库未更新 ==="
            echo "main_updated=false" >> $GITHUB_OUTPUT
          fi
        fi
  
    - name: 检查TableRow更新
      id: check_table
      if: steps.check_main.outputs.main_updated == 'true'
      run: |
        echo "=== 开始检查 TableRow 更新 ==="
        CURRENT_SHA=$(curl -s "https://api.github.com/repos/MartialBE/one-hub/commits?path=web/src/views/Channel/component/TableRow.jsx" | jq -r 'if length > 0 then .[0].sha else empty end' | cut -c1-7)
        echo "TableRow.jsx 最新 SHA: $CURRENT_SHA"
  
        ISSUE_INFO=$(curl -s "https://api.github.com/repos/${{ github.repository }}/issues?state=open&per_page=100" | jq -r '[.[] | select(.title == "one-hub")]')
        ISSUE_BODY=$(echo "$ISSUE_INFO" | jq -r '.[0].body')
        echo "当前 Issue 内容: $ISSUE_BODY"
  
        NEW_BODY=$(echo "$ISSUE_BODY" | sed "s/^TableRow.jsx-sha:.*/TableRow.jsx-sha:$CURRENT_SHA/")
        echo "更新后的 Issue 内容: $NEW_BODY"
  
        if [ "$ISSUE_BODY" != "$NEW_BODY" ]; then
          echo "=== 检测到 TableRow 更新 ==="
          echo "table_file_updated=true" >> $GITHUB_OUTPUT
        else
          echo "=== TableRow 未更新 ==="
          echo "table_file_updated=false" >> $GITHUB_OUTPUT
        fi
  
    - name: 最终检查
      id: final_check
      run: |
        echo "=== 最终检查 ==="
        if [[ "${{ steps.check_main.outputs.main_updated }}" == "true" ]]; then
          echo "需要执行构建"
          echo "should_build=true" >> $GITHUB_OUTPUT
        else
          echo "无需构建"
          echo "should_build=false" >> $GITHUB_OUTPUT
        fi

      - name: 发送TableRow通知
        if: steps.check_table.outputs.table_file_updated == 'true'
        uses: candies404/Multi-Channel-Notifier@latest
        with:
          title: "TableRow组件更新"
          content: "检测到新版本，点击查看：[TableRow.jsx](https://github.com/MartialBE/one-hub/blob/main/web/src/views/Channel/component/TableRow.jsx)"
          hitokoto: 'false'
          wpush_key : ${{ secrets.WPUSH_KEY }}

  build-deploy:
    name: 构建部署
    needs: check-updates
    if: needs.check-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai
    steps:
      # 以下步骤保持原有逻辑不变
      - name: 检出 MartialBE/one-hub
        uses: actions/checkout@v4
        with:
          repository: MartialBE/one-hub
          path: ""  # 在根目录

      - name: 检出源仓库
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: source-repo

      - name: 保存版本信息
        run: |
          HASH=$(git rev-parse --short=7 HEAD)
          echo "dev-$HASH" > VERSION

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.4.1

      - name: 缓存 Node 模块
        uses: actions/cache@v4
        with:
          path: |
            web/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-node-${{ hashFiles('web/yarn.lock') }}

      - name: 构建前端
        env:
          CI: ""
        run: |
          export VERSION=$(cat VERSION)
          cp source-repo/one-hub/TableRow.jsx web/src/views/Channel/component/TableRow.jsx
          cd web
          yarn install
          VITE_APP_VERSION=$VERSION yarn run build

      - name: 设置 Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=1.18.0"

      - name: 编译后端 (amd64)
        run: |
          go mod download
          go build -ldflags "-s -w -X 'one-api/common/config.Version=$(cat VERSION)' -extldflags '-static'" -o one-api-amd64

      - name: 编译后端 (arm64)
        run: |
          sudo rm /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu
          CC=aarch64-linux-gnu-gcc CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -ldflags "-s -w -X 'one-api/common/config.Version=$(cat VERSION)' -extldflags '-static'" -o one-api-arm64

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker 元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/one-hub
          tags: |
            type=raw,value=latest

      - name: 构建并推送镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile-action
