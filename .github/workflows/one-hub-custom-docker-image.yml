name: Check Image Architectures (skopeo only)

on:
  workflow_dispatch:

jobs:
  check-images:
    runs-on: ubuntu-latest
    steps:
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: Check architectures
        run: |
          IMAGES=("nginx" "redis:7.0" "chipsman/uptime-kuma" "chipsman/one-hub")
          
          for image in "${IMAGES[@]}"; do
            echo "处理镜像: $image"
            
            # 获取原始manifest
            if ! raw_manifest=$(skopeo inspect --raw docker://$image 2>&1); then
              echo "[错误] 无法获取镜像信息: $raw_manifest"
              echo "----------------------------------------"
              continue
            fi

            # 检测清单类型
            media_type=$(echo "$raw_manifest" | jq -r '.mediaType // "unknown"' 2>/dev/null)
            
            # 处理多架构镜像
            if [[ "$media_type" =~ (manifest.list.v2|oci.index.v1) ]]; then
              archs=$(echo "$raw_manifest" | jq -r '
                [.manifests[].platform |
                "\(.os)/\(.architecture)" + 
                (if .variant and .variant != "" then "/" + .variant else "" end)
                ] | unique | join(", ")
              ' 2>/dev/null || echo "unknown")
              type="多架构"

            # 处理单架构镜像
            else
              if ! inspect_info=$(skopeo inspect docker://$image 2>/dev/null); then
                echo "[警告] 获取单架构信息失败"
                inspect_info="{}"
              fi
              
              os=$(echo "$inspect_info" | jq -r '.Os // "unknown"')
              arch=$(echo "$inspect_info" | jq -r '.Architecture // "unknown"')
              variant=$(echo "$inspect_info" | jq -r '.Variant // ""')
              archs=${os}/${arch}${variant:+/$variant}
              type="单架构"
            fi

            printf "镜像名称: %s\n架构类型: %s\n支持架构: %s\n%s\n" \
              "$image" "$type" "${archs:-未识别}" "----------------------------------------"
          done
