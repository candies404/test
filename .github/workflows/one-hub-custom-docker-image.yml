name: Check Image Architectures (skopeo enhanced)

on:
  workflow_dispatch:

jobs:
  check-images:
    runs-on: ubuntu-latest
    steps:
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo jq

      - name: Check architectures
        run: |
          IMAGES=("nginx" "redis:7.0" "chipsman/uptime-kuma" "chipsman/one-hub")
          
          for image in "${IMAGES[@]}"; do
            echo "处理镜像: $image"
            
            # 获取原始manifest并提取关键信息
            if ! raw_data=$(skopeo inspect --raw docker://$image 2>&1); then
              echo "[错误] 无法获取镜像: $raw_data"
              echo "----------------------------------------"
              continue
            fi

            # 识别清单类型 (增强的混合检测)
            if <<< "$raw_data" jq -e '.manifests' &>/dev/null; then
              # 确认是多架构镜像
              archs=$(<<< "$raw_data" jq -r '
                [.manifests[] | 
                .platform as $p |
                "\($p.os)/\($p.architecture)" +
                (if $p.variant and $p.variant != "" then "/\($p.variant)" else "" end)
                ] | unique | join(", ")
              ')
              type="多架构"
            else
              # 解析单架构信息
              inspect_info=$(skopeo inspect docker://$image)
              os=$(<<< "$inspect_info" jq -r '.Os // "unknown"')
              arch=$(<<< "$inspect_info" jq -r '.Architecture // "unknown"')
              variant=$(<<< "$inspect_info" jq -r '.Variant? // ""')
              archs="${os}/${arch}${variant:+/$variant}"
              type="单架构"
            fi

            printf "镜像名称: %s\n架构类型: %s\n支持架构: %s\n%s\n" \
              "$image" "$type" "${archs}" "----------------------------------------"
          done
