name: one-hub 前端修改

on:
  workflow_dispatch:

jobs:
  check-updates:
    name: 原子化更新检查
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.final_check.outputs.should_build }}
      table_updated: ${{ steps.check_table.outputs.table_file_updated }}
    continue-on-error: true
    permissions:
      issues: write
      contents: read
    env:
      TZ: Asia/Shanghai
      RETRY_COUNT: 3  # API 重试次数
      RETRY_DELAY: 2  # 重试基础等待时间（秒）

    steps:
      # ========== 原子化数据获取 ==========
      - name: 获取仓库快照
        id: repo_snapshot
        run: |
          echo "=== 开始获取仓库快照 ==="
          
          # 获取主仓库最新提交
          echo "获取主仓库最新提交..."
          main_commit=$(curl -fsS "https://api.github.com/repos/MartialBE/one-hub/commits/main")
          main_sha=$(jq -r '.sha[0:7]' <<< "$main_commit")
          main_timestamp=$(jq -r '.commit.committer.date' <<< "$main_commit")
          echo "主仓库 SHA: $main_sha (时间: $main_timestamp)"
          
          # 获取 TableRow 的历史版本
          echo "获取 TableRow 历史版本..."
          table_commit=$(curl -fsS "https://api.github.com/repos/candies404/test/commits?path=one-hub/TableRow.jsx&until=$main_timestamp")
          table_sha=$(jq -r 'if length>0 then .[0].sha[0:7] else "null" end' <<< "$table_commit")
          echo "TableRow SHA: $table_sha"
          
          # 存储环境变量
          echo "存储环境变量..."
          echo "MAIN_SHA=$main_sha" >> $GITHUB_ENV
          echo "MAIN_TIMESTAMP=$main_timestamp" >> $GITHUB_ENV
          echo "TABLE_SHA=$table_sha" >> $GITHUB_ENV
          
          echo "=== 仓库快照获取完成 ==="

      # ========== Issue 管理 ==========
      - name: 管理追踪 Issue
        id: issue_manager
        env:
          ISSUE_TITLE: "one-hub-tracker"
        run: |
          echo "=== 开始管理追踪 Issue ==="
          
          # 带重试的 Issue 查询
          echo "查询现有 Issue..."
          for i in {1..3}; do
            issues=$(curl -fsS "https://api.github.com/repos/${{ github.repository }}/issues?state=open" |
              jq --arg title "$ISSUE_TITLE" '[.[] | select(.title == $title)]')
            if [ $(jq 'length' <<< "$issues") -gt 0 ]; then
              echo "找到现有 Issue"
              break
            fi
            echo "未找到 Issue，重试 $i/3..."
            sleep $((i*2))
          done
             
          if [ $(jq 'length' <<< "$issues") -eq 0 ]; then
            # 首次创建 Issue ======================
            echo "构建 Issue 内容..."
            issue_body=$(jq -n \
              --arg main "${{ env.MAIN_SHA }}" \
              --arg table "${{ env.TABLE_SHA }}" \
              --arg ts "${{ env.MAIN_TIMESTAMP }}" \
              '{
                repo_sha: $main,
                TableRow_file_sha: $table,
                timestamp: $ts
              }')
            
            echo "=== 创建新 Issue ==="
            response=$(curl -fsS -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$(jq -n --arg title "$ISSUE_TITLE" --argjson body "$issue_body" '{title: $title, body: $body|tojson}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues")
            echo "✅ 已创建 Issue: $(jq -r '.html_url' <<< "$response")"
            echo "main_updated=true" >> $GITHUB_OUTPUT
            echo "table_updated=false" >> $GITHUB_OUTPUT  # 首次创建不触发更新
            
          else
            # 存在现有 Issue ======================
            issue_id=$(jq -r '.[0].number' <<< "$issues")
            existing_body=$(jq -r '.[0].body' <<< "$issues")
            echo "现有 Issue ID: $issue_id"
            echo "现有 Issue 内容: $existing_body"
      
            # 解析现有 Issue 内容
            existing_data=$(echo "$existing_body" | jq -R fromjson)
            if [ $? -ne 0 ]; then
              echo "::error::无法解析现有 Issue 内容"
              exit 1
            fi
      
            # 获取旧 SHA 值
            old_table_sha=$(jq -r '.TableRow_file_sha' <<< "$existing_data")
            current_table_sha="${{ env.TABLE_SHA }}"
            echo "旧 TableRow SHA: $old_table_sha"
            echo "新 TableRow SHA: $current_table_sha"
            
            # 比较逻辑（核心修改）
            table_updated=false
            if [ "$current_table_sha" != "$old_table_sha" ]; then
              echo "🔄 检测到 TableRow 更新"
              table_updated=true
              
              # 构建新 body（保留其他字段）
              issue_body=$(jq -n \
                --arg main "${{ env.MAIN_SHA }}" \
                --arg table "${{ env.TABLE_SHA }}" \
                --arg ts "${{ env.MAIN_TIMESTAMP }}" \
                --argjson old "$existing_data" \
                '$old + {
                  TableRow_file_sha: $table,
                  repo_sha: $main,
                  timestamp: $ts
                }')
            else
              echo "✅ TableRow 未更新"
              # 保持原有 body 不变
              issue_body="$existing_data"
            fi
            
            # 更新 Issue（无论是否有变化都需要保持时间戳最新）
            echo "=== 更新 Issue ==="
            curl -fsS -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$(jq -n --argjson body "$issue_body" '{body: $body|tojson}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$issue_id"
            
            # 设置输出变量
            echo "table_updated=$table_updated" >> $GITHUB_OUTPUT
            echo "main_updated=true" >> $GITHUB_OUTPUT  # 强制保持为true以触发后续步骤
          fi
          echo "=== Issue 管理完成 ==="

      # ========== TableRow 检查 ==========
      - name: 检查组件更新
        id: check_table
        if: steps.issue_manager.outputs.main_updated == 'true'
        run: |
          echo "=== 开始检查 TableRow 更新 ==="
          
          # 使用原子化存储的初始值
          initial_sha="${{ env.TABLE_SHA }}"
          echo "初始 TableRow SHA: $initial_sha"
          
          # 获取当前最新 SHA
          echo "获取当前 TableRow SHA..."
          current_sha=$(curl -fsS "https://api.github.com/repos/candies404/test/commits?path=one-hub/TableRow.jsx&sha=main&_=$(date +%s)" |
            jq -r 'if length>0 then .[0].sha[0:7] else "null" end')
          echo "当前 TableRow SHA: $current_sha"
          
          # 检查更新
          if [ "$current_sha" != "$initial_sha" ] && [ "$initial_sha" != "null" ]; then
            echo "🚨 检测到 TableRow 更新"
            echo "table_file_updated=true" >> $GITHUB_OUTPUT
          else
            echo "✅ 无组件更新"
            echo "table_file_updated=false" >> $GITHUB_OUTPUT
          fi
          echo "=== TableRow 检查完成 ==="

      # ========== 最终检查 ==========
      - name: 构建决策
        id: final_check
        run: |
          echo "=== 开始最终检查 ==="
          if [[ "${{ steps.issue_manager.outputs.main_updated }}" == "true" ]]; then
            echo "📦 需要执行构建"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "⏸️ 跳过构建"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
          echo "=== 最终检查完成 ==="

      - name: 发送TableRow通知
        if: steps.check_table.outputs.table_file_updated == 'true'
        uses: candies404/Multi-Channel-Notifier@latest
        with:
          title: "TableRow组件更新"
          content: "检测到新版本，点击查看：[TableRow.jsx](https://github.com/MartialBE/one-hub/blob/main/web/src/views/Channel/component/TableRow.jsx)"
          hitokoto: 'false'
          wpush_key : ${{ secrets.WPUSH_KEY }}

  build-deploy:
    name: 构建部署
    needs: check-updates
    if: needs.check-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai
    steps:
      - name: 检出 MartialBE/one-hub
        uses: actions/checkout@v4
        with:
          repository: MartialBE/one-hub
          path: ""

      - name: 检出源仓库
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: source-repo

      - name: 保存版本信息
        run: |
          echo "=== 保存版本信息 ==="
          HASH=$(git rev-parse --short=7 HEAD)
          echo "当前提交哈希: $HASH"
          echo "dev-$HASH" > VERSION
          echo "版本文件内容: $(cat VERSION)"

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.4.1

      - name: 缓存 Node 模块
        uses: actions/cache@v4
        with:
          path: |
            web/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-node-${{ hashFiles('web/yarn.lock') }}

      - name: 构建前端
        env:
          CI: ""
        run: |
          echo "=== 开始构建前端 ==="
          export VERSION=$(cat VERSION)
          echo "当前版本: $VERSION"
          cp source-repo/one-hub/TableRow.jsx web/src/views/Channel/component/TableRow.jsx
          echo "TableRow.jsx 已替换"
          cd web
          yarn install
          VITE_APP_VERSION=$VERSION yarn run build
          echo "前端构建完成"

      - name: 设置 Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=1.18.0"

      - name: 编译后端 (amd64)
        run: |
          echo "=== 编译后端 (amd64) ==="
          go mod download
          go build -ldflags "-s -w -X 'one-api/common/config.Version=$(cat VERSION)' -extldflags '-static'" -o one-api-amd64
          echo "amd64 编译完成"

      - name: 编译后端 (arm64)
        run: |
          echo "=== 编译后端 (arm64) ==="
          sudo rm /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu
          CC=aarch64-linux-gnu-gcc CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -ldflags "-s -w -X 'one-api/common/config.Version=$(cat VERSION)' -extldflags '-static'" -o one-api-arm64
          echo "arm64 编译完成"

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker 元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/one-hub
          tags: |
            type=raw,value=latest

      - name: 构建并推送镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile-action
