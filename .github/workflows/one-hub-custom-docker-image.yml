name: one-hub 前端修改

on:
  workflow_dispatch:

jobs:
  check-updates:
    name: 原子化更新检查
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.final_check.outputs.should_build }}
      table_updated: ${{ steps.check_table.outputs.table_file_updated }}
    continue-on-error: true
    permissions:
      issues: write
      contents: read
    env:
      TZ: Asia/Shanghai
      RETRY_COUNT: 3  # API 重试次数
      RETRY_DELAY: 2  # 重试基础等待时间（秒）

    steps:
      # ========== 原子化数据获取 ==========
      - name: 获取仓库快照
        id: repo_snapshot
        run: |
          # 获取主仓库最新提交（包含完整时间戳）
          main_commit=$(curl -fsS "https://api.github.com/repos/MartialBE/one-hub/commits/main")
          main_sha=$(jq -r '.sha[0:7]' <<< "$main_commit")
          main_timestamp=$(jq -r '.commit.committer.date' <<< "$main_commit")
          
          # 获取 TableRow 的历史版本（确保与主仓库时间点一致）
          table_commit=$(curl -fsS "https://api.github.com/repos/MartialBE/one-hub/commits?path=web/src/views/Channel/component/TableRow.jsx&until=$main_timestamp")
          table_sha=$(jq -r 'if length>0 then .[0].sha[0:7] else "null" end' <<< "$table_commit")
          
          # 存储环境变量（后续步骤使用）
          echo "SNAPSHOT_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "MAIN_SHA=$main_sha" >> $GITHUB_ENV
          echo "MAIN_TIMESTAMP=$main_timestamp" >> $GITHUB_ENV
          echo "TABLE_SHA=$table_sha" >> $GITHUB_ENV
          
          echo "🔄 仓库快照："
          echo "  主仓库: $main_sha (时间: $main_timestamp)"
          echo "  TableRow: $table_sha"

      # ========== Issue 管理 ==========
      - name: 管理追踪 Issue
        id: issue_manager
        env:
          ISSUE_TITLE: "one-hub-tracker"
        run: |
          # 带重试的 Issue 查询函数
          fetch_issue() {
            for ((i=1; i<=$RETRY_COUNT; i++)); do
              response=$(curl -fsS "https://api.github.com/repos/${{ github.repository }}/issues?state=open&filter=created")
              issues=$(jq -r --arg title "$ISSUE_TITLE" '[.[] | select(.title == $title)]' <<< "$response")
              
              if [ $(jq 'length' <<< "$issues") -gt 0 ]; then
                echo "$issues"
                return 0
              fi
              
              sleep $(($RETRY_DELAY * $i))
            done
            echo "[]"
          }

          # 序列化 Issue 内容
          serialize_body() {
            jq -n \
              --arg main "${{ env.MAIN_SHA }}" \
              --arg table "${{ env.TABLE_SHA }}" \
              --arg ts "${{ env.MAIN_TIMESTAMP }}" \
              --arg snapshot "${{ env.SNAPSHOT_TIME }}" \
              '{ 
                metadata: {
                  version: "v2",
                  snapshot: $snapshot
                },
                data: {
                  main: $main,
                  table: $table,
                  timestamp: $ts
                }
              }' | base64 -w0
          }

          # 反序列化函数
          deserialize_body() {
            base64 -d <<< "$1" | jq -r '.data'
          }

          # 获取或创建 Issue
          issue_data=$(fetch_issue)
          if [ $(jq 'length' <<< "$issue_data") -eq 0 ]; then
            echo "🆕 创建新追踪 Issue"
            body=$(serialize_body)
            response=$(curl -fsS -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$(jq -n --arg title "$ISSUE_TITLE" --arg body "$body" '{title: $title, body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues")
            
            echo "✅ 已创建 Issue: $(jq -r '.html_url' <<< "$response")"
            echo "main_updated=true" >> $GITHUB_OUTPUT
          else
            echo "🔍 发现现有追踪 Issue"
            issue_number=$(jq -r '.[0].number' <<< "$issue_data")
            current_body=$(jq -r '.[0].body' <<< "$issue_data")
            current_data=$(deserialize_body "$current_body")
            
            # 比较逻辑（同时校验时间戳）
            new_body=$(serialize_body)
            if [ "$current_body" != "$new_body" ] || \
               [ "$(jq -r '.data.main' <<< "$current_data")" != "${{ env.MAIN_SHA }}" ] || \
               [ "$(jq -r '.data.timestamp' <<< "$current_data")" != "${{ env.MAIN_TIMESTAMP }}" ]; then
              echo "🔄 检测到更新："
              echo "  旧值: $(jq <<< "$current_data")"
              echo "  新值: main=${{ env.MAIN_SHA }}, table=${{ env.TABLE_SHA }}, ts=${{ env.MAIN_TIMESTAMP }}"
              
              # 更新 Issue
              curl -fsS -X PATCH \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "$(jq -n --arg body "$new_body" '{body: $body}')" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number"
              
              echo "main_updated=true" >> $GITHUB_OUTPUT
            else
              echo "✅ 无更新需要同步"
              echo "main_updated=false" >> $GITHUB_OUTPUT
            fi
          fi

      # ========== TableRow 检查 ==========
      - name: 检查组件更新
        id: check_table
        if: steps.issue_manager.outputs.main_updated == 'true'
        run: |
          # 始终使用原子化快照中的初始值
          initial_sha="${{ env.TABLE_SHA }}"
          
          # 获取当前最新 SHA（带缓存破坏参数）
          current_sha=$(curl -fsS "https://api.github.com/repos/MartialBE/one-hub/commits?path=web/src/views/Channel/component/TableRow.jsx&_=$(date +%s)" | 
            jq -r 'if length>0 then .[0].sha[0:7] else "null" end')
          
          echo "🔄 TableRow 版本检查："
          echo "  初始值: $initial_sha (来自快照 ${{ env.SNAPSHOT_TIME }})"
          echo "  当前值: $current_sha"
          
          if [ "$current_sha" != "$initial_sha" ] && [ "$initial_sha" != "null" ]; then
            echo "🚨 检测到 TableRow 更新"
            echo "table_file_updated=true" >> $GITHUB_OUTPUT
          else
            echo "✅ 无组件更新"
            echo "table_file_updated=false" >> $GITHUB_OUTPUT
          fi

      # ========== 最终检查 ==========
      - name: 构建决策
        id: final_check
        run: |
          if [[ "${{ steps.issue_manager.outputs.main_updated }}" == "true" ]]; then
            echo "📦 需要执行构建"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "⏸️ 跳过构建"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: 发送TableRow通知
        if: steps.check_table.outputs.table_file_updated == 'true'
        uses: candies404/Multi-Channel-Notifier@latest
        with:
          title: "TableRow组件更新"
          content: "检测到新版本，点击查看：[TableRow.jsx](https://github.com/MartialBE/one-hub/blob/main/web/src/views/Channel/component/TableRow.jsx)"
          hitokoto: 'false'
          wpush_key : ${{ secrets.WPUSH_KEY }}

  build-deploy:
    name: 构建部署
    needs: check-updates
    if: needs.check-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai
    steps:
      - name: 检出 MartialBE/one-hub
        uses: actions/checkout@v4
        with:
          repository: MartialBE/one-hub
          path: ""

      - name: 检出源仓库
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: source-repo

      - name: 保存版本信息
        run: |
          echo "=== 保存版本信息 ==="
          HASH=$(git rev-parse --short=7 HEAD)
          echo "当前提交哈希: $HASH"
          echo "dev-$HASH" > VERSION
          echo "版本文件内容: $(cat VERSION)"

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.4.1

      - name: 缓存 Node 模块
        uses: actions/cache@v4
        with:
          path: |
            web/node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-node-${{ hashFiles('web/yarn.lock') }}

      - name: 构建前端
        env:
          CI: ""
        run: |
          echo "=== 开始构建前端 ==="
          export VERSION=$(cat VERSION)
          echo "当前版本: $VERSION"
          cp source-repo/one-hub/TableRow.jsx web/src/views/Channel/component/TableRow.jsx
          echo "TableRow.jsx 已替换"
          cd web
          yarn install
          VITE_APP_VERSION=$VERSION yarn run build
          echo "前端构建完成"

      - name: 设置 Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=1.18.0"

      - name: 编译后端 (amd64)
        run: |
          echo "=== 编译后端 (amd64) ==="
          go mod download
          go build -ldflags "-s -w -X 'one-api/common/config.Version=$(cat VERSION)' -extldflags '-static'" -o one-api-amd64
          echo "amd64 编译完成"

      - name: 编译后端 (arm64)
        run: |
          echo "=== 编译后端 (arm64) ==="
          sudo rm /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu
          CC=aarch64-linux-gnu-gcc CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -ldflags "-s -w -X 'one-api/common/config.Version=$(cat VERSION)' -extldflags '-static'" -o one-api-arm64
          echo "arm64 编译完成"

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker 元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/one-hub
          tags: |
            type=raw,value=latest

      - name: 构建并推送镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile-action
